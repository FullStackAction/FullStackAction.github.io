(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{615:function(t,a,s){"use strict";s.r(a);var n=s(21),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"boolean-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-类型"}},[t._v("#")]),t._v(" Boolean 类型")]),t._v(" "),a("p",[t._v("示例代码：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" aBoolean"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Boolean "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" anotherBoolean"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Boolean "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("kotlin 中的 Boolean 在多数情况下，相当于 Java 中基本类型 boolean，只有在必要情况下才会装箱成 Java 中的装箱类型 Boolean，由编译器决定，通常我们不需要关心。")])]),t._v(" "),a("h2",{attrs:{id:"number-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-类型"}},[t._v("#")]),t._v(" Number 类型")]),t._v(" "),a("p",[t._v("Number 即数字，主要包括整型和浮点型：")]),t._v(" "),a("table",[a("th",[t._v("分类")]),t._v(" "),a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("位宽")]),t._v(" "),a("tr",[a("td",{staticStyle:{"background-color":"white"},attrs:{rowspan:"2"}},[t._v("浮点型")]),t._v(" "),a("td",[t._v("Double")]),t._v(" "),a("td",[t._v("64")])]),t._v(" "),a("tr",[a("td",[t._v("Float")]),t._v(" "),a("td",[t._v("32")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"background-color":"white"},attrs:{rowspan:"3"}},[t._v("整型")]),t._v(" "),a("td",[t._v("Long")]),t._v(" "),a("td",[t._v("64")])]),t._v(" "),a("tr",[a("td",[t._v("Int")]),t._v(" "),a("td",[t._v("32")])]),t._v(" "),a("tr",[a("td",[t._v("Short")]),t._v(" "),a("td",[t._v("16")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"background-color":"white"},attrs:{rowspan:"1"}},[t._v("字节")]),t._v(" "),a("td",[t._v("Byte")]),t._v(" "),a("td",[t._v("8")])])]),t._v(" "),a("h3",{attrs:{id:"int-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int-类型"}},[t._v("#")]),t._v(" Int 类型")]),t._v(" "),a("p",[t._v("kotlin 的 Int 类型跟 Java 中的 int 一样，可以用整数、十六进制、二进制写法表示：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" anInt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" anotherInt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFF")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 255")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" moreInt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b00000011")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" maxInt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2147483647")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" minInt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MIN_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -2147483648")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("整型是有符号的数，整型的最高位是符号位，剩下的 31 位表示数值范围，最大值是"),a("code",[t._v("Math.pow(2.0, 31.0) - 1")]),t._v("，最小值是"),a("code",[t._v("-Math.pow(2.0, 31.0)")])])]),t._v(" "),a("h3",{attrs:{id:"long-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#long-类型"}},[t._v("#")]),t._v(" Long 类型")]),t._v(" "),a("p",[t._v("Long 类型与 Int 类型相似，只是 Int 类型是 32 位，而 Long 类型是 64 位，能表示更大的数：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" aLong"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Long "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12345678987654321")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12345678987654321")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" anotherLong"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Long "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" maxLong"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Long "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Long"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9223372036854775807")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" minLong"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Long "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Long"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MIN_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -9223372036854775808")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("因为 "),a("code",[t._v("anotherLong")]),t._v(" 强制指定了 Long 类型，所以对应的值 123 是 Long 类型，而 "),a("code",[t._v("println(123)")]),t._v(" 中的 123 则是 Int 类型，如果需要指定为 Long 类型的话，可以这样来书写 "),a("code",[t._v("println(123L)")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"float-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#float-类型"}},[t._v("#")]),t._v(" Float 类型")]),t._v(" "),a("p",[t._v("Float 即单精度浮点数，是带有小数的数，Float 类型的数值表示必须在末尾加上 "),a("code",[t._v("F")]),t._v(" 或 "),a("code",[t._v("f")]),t._v("，否则编译会认为是 Double 类型。")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" aFloat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Float "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0F")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" anotherFloat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Float "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1E3f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1000.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" maxFloat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Float "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Float"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.4028235E38")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" minFloat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Float "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Float"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MIN_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.4E-45")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" minFloatReal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Float "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Float"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -3.4028235E38")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" positiveInfinityFloat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Float "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Float"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("POSITIVE_INFINITY "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正无穷，输出 Infinity")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" negativeInfinityFloat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Float "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Float"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NEGATIVE_INFINITY "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 负无穷，输出 -Infinity")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("要注意 "),a("code",[t._v("Float.MIN_VALUE")]),t._v(" 指最小非 0 正数！最小非 0 正数！最小非 0 正数！如果想表示带符号的最小浮点数则需要使用 "),a("code",[t._v("-Float.MAX_VALUE")]),t._v("。")])]),t._v(" "),a("p",[t._v("以下是 Kotlin 中 Float 的部分源码注释：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Represents a single-precision 32-bit IEEE 754 floating point number.\n * On the JVM, non-nullable values of this type are represented as values of the primitive type `float`.\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Float "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Comparable"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Float"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("companion")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n         * A constant holding the smallest *positive* nonzero value of Float.\n         */")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" MIN_VALUE"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Float\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n         * A constant holding the largest positive finite value of Float.\n         */")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" MAX_VALUE"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Float\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nan"}},[t._v("#")]),t._v(" NaN")]),t._v(" "),a("p",[t._v('Float 拥有一个 NaN 常量属性，表示"不是一个数"的数，什么情况下会得到 NaN 呢？')]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Float"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NaN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("通过上述 Demo 可以得出 2 个结论：")]),t._v(" "),a("ol",[a("li",[t._v("除零可以得到 NaN")]),t._v(" "),a("li",[t._v("NaN 跟任何 NaN 结果不是相等的")])]),t._v(" "),a("blockquote",[a("p",[t._v('NaN 表示 "不是一个数" ，所以比较起来没有意义。')])]),t._v(" "),a("h3",{attrs:{id:"double-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#double-类型"}},[t._v("#")]),t._v(" Double 类型")]),t._v(" "),a("p",[t._v("Double 即双精度浮点数（或多精度浮点数），Double 之于 Float 就如同 Long 之 Int，故 Double 其实就是比 Float 能表示更大的浮点数而已。")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" aDouble"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Double "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" anotherDouble"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Double "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415926")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.1415926")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" maxDouble"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Double "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Double"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.7976931348623157E308")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" minDouble"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Double "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Double"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MIN_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4.9E-324")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" minDoubleReal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Double "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Double"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -1.7976931348623157E308")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("Double 与 Float 一样，"),a("code",[t._v("Double.MIN_VALUE")]),t._v(" 表示的是最小非 0 正数。")])]),t._v(" "),a("h3",{attrs:{id:"short-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#short-类型"}},[t._v("#")]),t._v(" Short 类型")]),t._v(" "),a("p",[t._v("Short 也称短整型，位宽比 Int 少一半，即 16 位：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" aShort"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Short "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 127")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" maxShort"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Short "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Short"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 32767")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" minShort"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Short "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Short"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MIN_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -32768")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("因为 Short 是 16 位的有符号数，所以 Short 能表示的最大数值是"),a("code",[t._v("2 的 15 次减 1")]),t._v("，即："),a("code",[t._v("Math.pow(2.0, 15.0) - 1")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"byte-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#byte-类型"}},[t._v("#")]),t._v(" Byte 类型")]),t._v(" "),a("p",[t._v("Byte 类型比 Short 类型更短，一般只用来处理二进制数据流：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" maxByte"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Byte "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Byte"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 127")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" minByte"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Byte "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Byte"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MIN_VALUE "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -128")]),t._v("\n")])])]),a("h3",{attrs:{id:"基本类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型转换"}},[t._v("#")]),t._v(" 基本类型转换")]),t._v(" "),a("p",[t._v("Java 支持使用 long 类型或 float 类型变量接收一个 int 类型变量，且不报错，这是因为 Java 支持隐式转换，但这在 Kotlin 中是行不通的，Kotlin 不支持隐式转换，举个例子：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" anInt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" aLong"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Long "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" anInt "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错：Type mismatch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" aLong"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Long "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" anInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLong")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正常")]),t._v("\n")])])]),a("h2",{attrs:{id:"char-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#char-类型"}},[t._v("#")]),t._v(" Char 类型")]),t._v(" "),a("ul",[a("li",[t._v("Char 称为字符，对应 Java 的 Character")]),t._v(" "),a("li",[t._v("Char 占两个字节，表示一个 16 位的 Unicode 字符")]),t._v(" "),a("li",[t._v("Char 需要用单引号 "),a("code",[t._v("''")]),t._v(" 引起来，例如：'0'，'a'，'\\n'")])]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" aChar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'0'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" bChar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'林'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 林")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" cChar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\t'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 看不见的制表符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" dChar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\u9510'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 锐")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("Char 表示一个字符，其值的书写可以是字母、数字、Unicode、以及类似 "),a("code",[t._v("\\n")]),t._v(" 的特殊字符。")])]),t._v(" "),a("p",[t._v("还有一些符号，在语法上有特殊作用的，想要输出它原本的样子，需要借助 "),a("code",[t._v("\\")]),t._v(" 进行转义：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("转义字符")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\t")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("制表符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\b")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("光标后退一个字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\n")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("回车")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\r")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("光标回到行首")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\'")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("单引号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v('\\"')]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("双引号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\\\")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("反斜杠")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\$")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("美元符号，Kotlin 支持美元符号开头的字符串模板")])])])]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" eChar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" fChar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\"'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" gChar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\\"'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" hChar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\$'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" iChar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\\\'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \\")]),t._v("\n")])])]),a("h2",{attrs:{id:"string-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-类型"}},[t._v("#")]),t._v(" String 类型")]),t._v(" "),a("p",[t._v("String 字符串，即一连串的字符，字符 Char 使用 "),a("code",[t._v("''")]),t._v("引起来，字符串 String 则使用 "),a("code",[t._v('""')]),t._v("引起来：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" aString"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloWorld"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HelloWorld")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" anotherString"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charArrayOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'H'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'l'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'l'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'o'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'W'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'o'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'r'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'l'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HelloWorld")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" anotherString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" anotherString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("这里的 "),a("code",[t._v("==")]),t._v(" 实际上就是 "),a("code",[t._v("equals()")]),t._v("，判断值是否相同；而 "),a("code",[t._v("===")]),t._v(" 是全等运算符，除了判断值是否相等，还会判断地址是否也相同，只有值与地址都相等的情况下才会为 "),a("code",[t._v("true")]),t._v("。")])]),t._v(" "),a("p",[t._v("字符串模板，可以在字符串中使用 "),a("code",[t._v("$")]),t._v(" 符号引入其他变量：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"输出一个字符串："')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" aString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HelloWorld")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" arg1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" arg2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("arg1")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" + ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("arg2")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" = ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("arg1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" arg2")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0 + 1 = 1")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("单个变量使用 "),a("code",[t._v("$")]),t._v(" 即可，表达式则需要使用 "),a("code",[t._v("${}")])])]),t._v(" "),a("p",[t._v("字符串除了可以用 "),a("code",[t._v('""')]),t._v("　引起来，还可以使用 "),a("code",[t._v('""""""')]),t._v(" (3 对引号)引起来，3 引号字符串比双引号字符串更强大，包括换行也会被识别，不需要借助 "),a("code",[t._v("\\n")]),t._v(" ，但同时这些转义字符也就无效了，可以理解为是最原始的字符串。")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    \\t \\n")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    |哈哈哈")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" rawString"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal multiline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""\n    \\t \\n\n    |哈哈哈\n    """')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" rawString1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal multiline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("aString")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("  \\")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("aString")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HelloWorld  \\HelloWorld")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" rawString2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal multiline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""$ aString"""')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $ aString")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("三引号字符串支持字符串模板，即支持使用 "),a("code",[t._v("$")]),t._v(" 引入变量，且无法使用 "),a("code",[t._v("\\")]),t._v(" 对 "),a("code",[t._v("$")]),t._v(" 进行转义！")])])])}),[],!1,null,null,null);a.default=r.exports}}]);
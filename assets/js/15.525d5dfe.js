(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{425:function(e,t,a){"use strict";a.r(t);var i=a(21),n=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"简述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简述"}},[e._v("#")]),e._v(" 简述")]),e._v(" "),t("p",[e._v("Material Design从Android 5.0开始引入，是一种全新的设计语言，称为“原材料设计”，是谷歌提倡的一种设计风格、理念、原则。结合拟物设计和扁平化设计风格，融入了一些科技理念。")]),e._v(" "),t("p",[e._v("想深入了解的话，可以查这篇wiki："),t("a",{attrs:{href:"http://wiki.jikexueyuan.com/project/material-design/material-design-intro/introduction.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Material Design 中文版"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("*"),t("em",[e._v("注：使用下文中介绍的控件，需在项目中引入v7包的支持。正如上面所说，Material Design从Android 5.0开始引入，故低版本的系统没有这类控件。")])]),e._v(" "),t("p",[e._v("如：使用Android Studio可以在gradle的dependencies中写入：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("compile 'com.android.support:appcompat-v7:25.3.0'\n")])])]),t("p",[e._v("Eclipse的请自行百度吧，毕竟就算导入了v7包，若编译版本和v7包的版本存在新旧问题时，v7包工程自身会报错的，还有其他一些细节要注意，这里就不做介绍了。")]),e._v(" "),t("h2",{attrs:{id:"一、swiperefreshlayout"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、swiperefreshlayout"}},[e._v("#")]),e._v(" 一、SwipeRefreshLayout")]),e._v(" "),t("h3",{attrs:{id:"_1、使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、使用"}},[e._v("#")]),e._v(" 1、使用")]),e._v(" "),t("p",[e._v("SwipeRefreshLayout是谷歌推出的一个下拉刷新控件，符合MD设计，使用方便，可通过其提供的方法设置控件的尺寸、颜色、刷新距顶悬浮距离等，具体使用如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("//设置 SwipeRefreshLayout 的尺寸\nmSrl.setSize(SwipeRefreshLayout.LARGE);\n//设置 SwipeRefreshLayout 刷新时的颜色切换（可以有无数种）\nmSrl.setColorSchemeColors(Color.RED, Color.YELLOW, Color.GREEN);\n//设置 SwipeRefreshLayout 的背景色\nmSrl.setBackgroundColor(Color.GRAY);\n//设置 SwipeRefreshLayout 的下拉距离\nmSrl.setDistanceToTriggerSync(100);\n//设置 SwipeRefreshLayout 正在刷新监听\nmSrl.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n    @Override\n    public void onRefresh() {\n        ...\n\t\t刷新数据源\n\t\t...\n    }\n});\n//手动停止刷新\nmSrl.setRefreshing(false);\n")])])]),t("h3",{attrs:{id:"_2、效果预览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、效果预览"}},[e._v("#")]),e._v(" 2、效果预览：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082748.gif",alt:"SwipeRefreshLayout"}})]),e._v(" "),t("h2",{attrs:{id:"二、listpopupwindow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、listpopupwindow"}},[e._v("#")]),e._v(" 二、ListPopupWindow")]),e._v(" "),t("p",[e._v("popupWindow大家都知道，是Android中弹出式菜单，而ListPopupWindow顾名思义就是列表型的弹出式菜单，使用该控件可以做到类似下拉菜单的功能，但不限如此。")]),e._v(" "),t("h3",{attrs:{id:"_1、使用-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、使用-2"}},[e._v("#")]),e._v(" 1、使用")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("mListPopupWindow = new ListPopupWindow(this);\n//设置 ListPopupWindow 的数据适配器\nmListPopupWindow.setAdapter(mAdapter);\n//设置 ListPopupWindow 的显示位置（在指定控件下方）\nmListPopupWindow.setAnchorView(view);\n//设置 ListPopupWindow 的宽度\nmListPopupWindow.setWidth(200);\n//设置 ListPopupWindow 的高度\nmListPopupWindow.setHeight(500);\n//设置 ListPopupWindow 的条目点击事件（必须在show方法前设置，否则无效）\nmListPopupWindow.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n    @Override\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n        Toast.makeText(getApplicationContext(), mItemArr[position], Toast.LENGTH_SHORT).show();\n        mListPopupWindow.dismiss();\n    }\n});\nmListPopupWindow.show();\n")])])]),t("h3",{attrs:{id:"_2、效果预览-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、效果预览-2"}},[e._v("#")]),e._v(" 2、效果预览：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082820.gif",alt:"ListPopupWindow"}})]),e._v(" "),t("h2",{attrs:{id:"三、popupmenu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、popupmenu"}},[e._v("#")]),e._v(" 三、PopupMenu")]),e._v(" "),t("p",[e._v("PopupMenu代表弹出式菜单,它会在指定组件上弹出PopupMenu,默认情况下,PopupMenu会显示在该组件的下方或上方。与ListPopupWindow的区别在于，ListPopupWindow使用适配器来填充条目，而PopupMenu则是使用menu布局来填充条目。")]),e._v(" "),t("h3",{attrs:{id:"_1、使用-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、使用-3"}},[e._v("#")]),e._v(" 1、使用")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('PopupMenu popupMenu = new PopupMenu(this, view);\n//设置 PopupMenu 的显示菜单项\npopupMenu.inflate(R.menu.main);\n// popupMenu.getMenuInflater().inflate(R.menu.main, popupMenu.getMenu());//与一行没什么区别\n\n//默认 PopupMenu 不显示条目icon，可以通过反射来强制使其显示icon\nField field = popupMenu.getClass().getDeclaredField("mPopup");\nfield.setAccessible(true);\nMenuPopupHelper mHelper = (MenuPopupHelper) field.get(popupMenu);\nmHelper.setForceShowIcon(true);\n\n//设置 PopupMenu 的条目点击事件（点击后会自动dismiss）\npopupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n    @Override\n    public boolean onMenuItemClick(MenuItem item) {\n        Toast.makeText(getApplicationContext(), item.getTitle(), Toast.LENGTH_SHORT).show();\n        return false;\n    }\n});\n//显示 PopupMenu\npopupMenu.show();\n')])])]),t("h3",{attrs:{id:"_2、效果预览-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、效果预览-3"}},[e._v("#")]),e._v(" 2、效果预览：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082908.gif",alt:"PopupMenu"}})]),e._v(" "),t("h2",{attrs:{id:"四、linearlayoutcompat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、linearlayoutcompat"}},[e._v("#")]),e._v(" 四、LinearLayoutCompat")]),e._v(" "),t("p",[e._v("LinearLayoutCompat是对LinearLayout的扩展，可以为此布局中的子View之间添加分割线divider。可以通过自定义属性divider来指定分割线的样式，通过自定义属性showDividers来指定分割线的显示位置。")]),e._v(" "),t("h3",{attrs:{id:"_1、使用-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、使用-4"}},[e._v("#")]),e._v(" 1、使用")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<android.support.v7.widget.LinearLayoutCompat\n    android:id="@+id/llc"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:layout_gravity="center"\n    android:orientation="vertical"\n    app:divider="@drawable/line"\n    app:showDividers="beginning">\n\t\t...\n\t\t子控件\n\t\t...\n</android.support.v7.widget.LinearLayoutCompat>\n')])])]),t("h3",{attrs:{id:"_2、效果预览-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、效果预览-4"}},[e._v("#")]),e._v(" 2、效果预览：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082927.gif",alt:"LinearLayoutCompat"}})]),e._v(" "),t("h2",{attrs:{id:"五、recyclerview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、recyclerview"}},[e._v("#")]),e._v(" 五、RecyclerView")]),e._v(" "),t("p",[e._v("RecyclerView是v7包中最重要、最常用的控件之一，可实现线性列表、网格列表、瀑布流列表效果，却具有高度解耦、性能优化的优势，可以说是ListView、GridView的增强版。")]),e._v(" "),t("h3",{attrs:{id:"_1、使用-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、使用-5"}},[e._v("#")]),e._v(" 1、使用")]),e._v(" "),t("p",[e._v("RecyclerViewr的使用大体分两步：")]),e._v(" "),t("ul",[t("li",[e._v("设置适配器Adapter")]),e._v(" "),t("li",[e._v("设置布局管理器LayoutManager")])]),e._v(" "),t("h4",{attrs:{id:"_1-设置适配器adapter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-设置适配器adapter"}},[e._v("#")]),e._v(" 1）设置适配器Adapter")]),e._v(" "),t("p",[e._v("RecyclerView使用的适配器必须继承RecyclerView.Adapter，并指定RecyclerView.ViewHolder，在onCreateViewHolder()中创建自定义的RecyclerView.ViewHolder，在onBindViewHolder()中对条目进行设置，理解上相对简单，代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder> {\n\n    private List<String> mData;\n\n    public MyAdapter(List<String> data) {\n        mData = data;\n    }\n\n    @Override\n    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View itemView = View.inflate(parent.getContext(), android.R.layout.simple_list_item_1, null);\n        return new MyViewHolder(itemView);\n    }\n\n    @Override\n    public void onBindViewHolder(MyViewHolder holder, int position) {\n        holder.mTv.setText(mData.get(position));\n    }\n\n    @Override\n    public int getItemCount() {\n        return mData.size();\n    }\n\n    class MyViewHolder extends RecyclerView.ViewHolder {\n\n        TextView mTv;\n\n        public MyViewHolder(View itemView) {\n            super(itemView);\n            mTv = (TextView) itemView.findViewById(android.R.id.text1);\n        }\n    }\n\n}\n")])])]),t("h4",{attrs:{id:"_2-设置布局管理器layoutmanager"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置布局管理器layoutmanager"}},[e._v("#")]),e._v(" 2）设置布局管理器LayoutManager")]),e._v(" "),t("p",[e._v("RecyclerView可以使用布局管理器有三种：")]),e._v(" "),t("ul",[t("li",[e._v("LinearLayoutManager：线性列表")]),e._v(" "),t("li",[e._v("GridLayoutManager：网格列表")]),e._v(" "),t("li",[e._v("StaggeredGridLayoutManager：瀑布流列表")])]),e._v(" "),t("p",[e._v("以LinearLayoutManager为例：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("LinearLayoutManager(Context context, int orientation, boolean reverseLayout)\n")])])]),t("p",[e._v("在创建LinearLayoutManage时，可以通过参数二指定列表的方向，通过参数三指定数据是否反转（本来数据是从上到下进行填充，当设置了reverseLayout为true时，数据则从下到上进行填充），GridLayoutManager及StaggeredGridLayoutManager的使用也差不多。")]),e._v(" "),t("p",[e._v("调用RecyclerView的setLayoutManager()即可设置布局管理器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("mRv.setLayoutManager(new LinearLayoutManager(this));\n")])])]),t("h3",{attrs:{id:"_2、效果预览-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、效果预览-5"}},[e._v("#")]),e._v(" 2、效果预览：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082927.gif",alt:"RecyclerView"}})]),e._v(" "),t("h2",{attrs:{id:"最后附上demo链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最后附上demo链接"}},[e._v("#")]),e._v(" 最后附上Demo链接")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/GitLqr/MaterialDesignDemo",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/GitLqr/MaterialDesignDemo"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);
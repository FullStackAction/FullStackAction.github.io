(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{365:function(e,t,a){"use strict";a.r(t);var n=a(15),r=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"一、简述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、简述"}},[e._v("#")]),e._v(" 一、简述")]),e._v(" "),t("p",[e._v("SearchView是v7包中的一个兼容性控件，它可以单独使用，也可以配合menu+toolbar一起使用。本文将使用第二种方式，对SearchView进行探索。最后将通过代码实战，实现 “仿网易云音乐本地音乐搜索” 效果，带你全面解锁SearchView的UI定制及查询功能的实现。")]),e._v(" "),t("h2",{attrs:{id:"二、常规使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、常规使用"}},[e._v("#")]),e._v(" 二、常规使用")]),e._v(" "),t("p",[e._v("*本文重点是SearchView，所以对Toolbar的使用及注意事项在本文中将不会有过多的体现，如需了解可自行百度或直接查看本Demo源码（源码在文末）。")]),e._v(" "),t("h3",{attrs:{id:"_1、在menu的xml文件中配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、在menu的xml文件中配置"}},[e._v("#")]),e._v(" 1、在menu的xml文件中配置")]),e._v(" "),t("p",[e._v("要跟menu一起使用，就必须在menu的xml文件中对其中的一个item进行actionViewClass属性配置，如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<?xml version="1.0" encoding="utf-8"?>\n<menu xmlns:android="http://schemas.android.com/apk/res/android"\n      xmlns:app="http://schemas.android.com/apk/res-auto"\n      xmlns:tools="http://schemas.android.com/tools">\n    <item\n        android:id="@+id/menu_search"\n        android:orderInCategory="100"\n        android:title="搜索"\n        app:actionViewClass="android.support.v7.widget.SearchView"\n        app:showAsAction="always"\n        />\n\t...\n</menu>\n')])])]),t("p",[e._v('这个item跟普通item的差别在于使用了app:actionViewClass属性（注意是app:开头的！！！），这里使用的是兼容性控件里的SearchView，所以取值"android.support.v7.widget.SearchView"。其中title的设置不会生效（一般设置了title的item，长按后会有弹出提示文字），这里去掉也无所谓。')]),e._v(" "),t("h3",{attrs:{id:"_2、在oncreateoptionsmenu-中得到searchview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、在oncreateoptionsmenu-中得到searchview"}},[e._v("#")]),e._v(" 2、在onCreateOptionsMenu()中得到SearchView")]),e._v(" "),t("p",[e._v("我们知道menu在创建时会回调Activity中的onCreateOptionsMenu(Menu menu)方法，通过该方法可以得到Menu对象，而SearchView是Menu中item的一个actionView，actionView可以通过MenuItemCompat获取，故，通过Menu对象可以得到SearchView。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.search_view, menu);\n    MenuItem searchItem = menu.findItem(R.id.menu_search);\n    //通过MenuItem得到SearchView\n    mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem);\n\t...\n    return super.onCreateOptionsMenu(menu);\n}\n")])])]),t("p",[e._v("到这里就可以看到效果了：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080407.gif",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_3、对searchview进行设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、对searchview进行设置"}},[e._v("#")]),e._v(" 3、对SearchView进行设置")]),e._v(" "),t("h4",{attrs:{id:"默认展开搜索框"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认展开搜索框"}},[e._v("#")]),e._v(" 默认展开搜索框")]),e._v(" "),t("p",[e._v("手淘的首页搜索框是默认展开的，使用SearchView可以做一样的效果。此外，SearchView有三种默认展开的设置，效果上有略微不同，请结合注释与图片仔细观察。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/*------------------ SearchView有三种默认展开搜索框的设置方式，区别如下： ------------------*/\n//设置搜索框直接展开显示。左侧有放大镜(在搜索框中) 右侧有叉叉 可以关闭搜索框\nmSearchView.setIconified(false);\n//设置搜索框直接展开显示。左侧有放大镜(在搜索框外) 右侧无叉叉 有输入内容后有叉叉 不能关闭搜索框\nmSearchView.setIconifiedByDefault(false);\n//设置搜索框直接展开显示。左侧有无放大镜(在搜索框中) 右侧无叉叉 有输入内容后有叉叉 不能关闭搜索框\nmSearchView.onActionViewExpanded();\n")])])]),t("p",[e._v("按顺序效果依次如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080424.gif",alt:"setIconified(false)"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080449.gif",alt:"setIconifiedByDefault(false)"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080507.gif",alt:"onActionViewExpanded()"}})]),e._v(" "),t("h4",{attrs:{id:"searchview的常规设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#searchview的常规设置"}},[e._v("#")]),e._v(" SearchView的常规设置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('//设置最大宽度\nmSearchView.setMaxWidth(500);\n//设置是否显示搜索框展开时的提交按钮\nmSearchView.setSubmitButtonEnabled(true);\n//设置输入框提示语\nmSearchView.setQueryHint("hint");\n')])])]),t("p",[e._v("比较容易，直接看下效果：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080529.gif",alt:""}})]),e._v(" "),t("h4",{attrs:{id:"searchview的事件监听"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#searchview的事件监听"}},[e._v("#")]),e._v(" SearchView的事件监听")]),e._v(" "),t("p",[e._v("SearchView提供的事件监听还是比较丰富的，一般常用的有打开搜索框按钮的点击事件、清空或关闭搜索框按钮的点击事件、搜索框文字变化事件等。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('//搜索框展开时后面叉叉按钮的点击事件\nmSearchView.setOnCloseListener(new SearchView.OnCloseListener() {\n    @Override\n    public boolean onClose() {\n        Toast.makeText(getApplicationContext(), "Close", Toast.LENGTH_SHORT).show();\n        return false;\n    }\n});\n//搜索图标按钮(打开搜索框的按钮)的点击事件\nmSearchView.setOnSearchClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Toast.makeText(getApplicationContext(), "Open", Toast.LENGTH_SHORT).show();\n    }\n});\n//搜索框文字变化监听\nmSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n    @Override\n    public boolean onQueryTextSubmit(String s) {\n        Log.e("CSDN_LQR", "TextSubmit : " + s);\n        return false;\n    }\n\n    @Override\n    public boolean onQueryTextChange(String s) {\n        Log.e("CSDN_LQR", "TextChange --\x3e " + s);\n        return false;\n    }\n});\n')])])]),t("p",[e._v("这个也比较容易，直接看下效果：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080545.gif",alt:""}})]),e._v(" "),t("p",[e._v("以上就是SearchView给开发者提供的常规方法调用和属性设置，但是这并不能满足我们的开发需求，因为开发中大部分设计师根据不管MaterialDesign的设计规范，所以大多数情况下需要根据UI设计稿自定义SearchView的样式了，这相对比较复杂，下面将通过实战来学习SearchView的样式自定义，以此来满足我们的开发需求。")]),e._v(" "),t("h2",{attrs:{id:"三、实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、实战"}},[e._v("#")]),e._v(" 三、实战")]),e._v(" "),t("p",[e._v("仿网易云音乐本地音乐搜索，先看下效果，然后开始实战：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource20210320170901/image/20210107080610.gif",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_1、设置toolbar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、设置toolbar"}},[e._v("#")]),e._v(" 1、设置Toolbar")]),e._v(" "),t("h4",{attrs:{id:"_1-创建该界面的布局activity-search-view2-xml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建该界面的布局activity-search-view2-xml"}},[e._v("#")]),e._v(" 1）创建该界面的布局activity_search_view2.xml")]),e._v(" "),t("h5",{attrs:{id:"指定toolbar的高度、naviagtionicon、标题、字体等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定toolbar的高度、naviagtionicon、标题、字体等"}},[e._v("#")]),e._v(" 指定Toolbar的高度、NaviagtionIcon、标题、字体等")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<?xml version="1.0" encoding="utf-8"?>\n<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n              xmlns:app="http://schemas.android.com/apk/res-auto"\n              android:layout_width="match_parent"\n              android:layout_height="match_parent"\n              android:orientation="vertical">\n\n    <android.support.v7.widget.Toolbar\n        android:id="@+id/toolbar"\n        style="@style/Toolbar.MyStyle"\n        android:layout_width="match_parent"\n        android:layout_height="?attr/actionBarSize"\n        android:background="?attr/colorPrimary"\n        app:navigationIcon="@mipmap/lg"\n        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"\n        app:title="本地音乐"\n        app:titleTextAppearance="@style/Toolbar.TitleText"\n        app:titleTextColor="@android:color/white"/>\n</LinearLayout>\n')])])]),t("p",[e._v("其中style指向的Toolbar.MyStyle是设置标题与NavigationIcon的距离，titleTextAppearance指向的Toolbar.TitleText是设置标题文字大小。")]),e._v(" "),t("h5",{attrs:{id:"在style-xml中创建toolbar的自定义样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在style-xml中创建toolbar的自定义样式"}},[e._v("#")]),e._v(" 在style.xml中创建Toolbar的自定义样式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('\x3c!--标题与NavigationIcon的距离--\x3e\n<style name="Toolbar.MyStyle" parent="Base.Widget.AppCompat.Toolbar">\n    <item name="contentInsetStart">0dp</item>\n    <item name="contentInsetStartWithNavigation">0dp</item>\n</style>\n\n\x3c!--Toolbar标题文字大小--\x3e\n<style name="Toolbar.TitleText" parent="TextAppearance.Widget.AppCompat.Toolbar.Title">\n    <item name="android:textSize">15sp</item>\n</style>\n')])])]),t("p",[e._v("如果不设置的话，效果不好，NavigationIcon和Toolbar的标题之前的间距看起来很大，下面看下设置前后的差别：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080625.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080639.png",alt:""}})]),e._v(" "),t("h4",{attrs:{id:"_2-设置去除actionbar的主题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置去除actionbar的主题"}},[e._v("#")]),e._v(" 2）设置去除ActionBar的主题")]),e._v(" "),t("h5",{attrs:{id:"在style-xml中创建无actionbar的主题-并设置主题背景色"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在style-xml中创建无actionbar的主题-并设置主题背景色"}},[e._v("#")]),e._v(" 在Style.xml中创建无ActionBar的主题，并设置主题背景色")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<style name="AppTheme.NoActionBar2" parent="AppTheme">\n    <item name="colorPrimary">#D33A31</item>\n    <item name="colorPrimaryDark">#D33A31</item>\n    <item name="windowActionBar">false</item>\n    <item name="windowNoTitle">true</item>\n    \x3c!--设置menu中item的图标颜色--\x3e\n    <item name="android:textColorSecondary">#ffffff</item>\n</style>\n')])])]),t("p",[e._v("不设置textColorSecondary的话，默认menu的item图标是黑色，下面看下设置前后的差别：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080649.png",alt:""}}),e._v(" "),t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080659.png",alt:""}})]),e._v(" "),t("h5",{attrs:{id:"为activity设置主题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为activity设置主题"}},[e._v("#")]),e._v(" 为Activity设置主题")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n          package="com.lqr.materialdesigndemo">\n\n    <application\n        ...\n        android:theme="@style/AppTheme">\n        ...\n\n        <activity\n            android:name=".SearchViewActivity2"\n            android:screenOrientation="portrait"\n            android:theme="@style/AppTheme.NoActionBar2"/>\n    </application>\n</manifest>\n')])])]),t("h4",{attrs:{id:"_3-在activity中设置toolbar的代码如下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-在activity中设置toolbar的代码如下"}},[e._v("#")]),e._v(" 3）在Activity中设置Toolbar的代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public class SearchViewActivity2 extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_search_view2);\n\t\t// 使用Toolbar代替actionbar\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n    }\n    ...\n}\n")])])]),t("h3",{attrs:{id:"_2、设置menu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、设置menu"}},[e._v("#")]),e._v(" 2、设置Menu")]),e._v(" "),t("h4",{attrs:{id:"_1-创建菜单布局search-view-xml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建菜单布局search-view-xml"}},[e._v("#")]),e._v(" 1）创建菜单布局search_view.xml")]),e._v(" "),t("p",[e._v("跟之前的代码相比，只是多加了几个item而已。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<?xml version="1.0" encoding="utf-8"?>\n<menu xmlns:android="http://schemas.android.com/apk/res/android"\n      xmlns:app="http://schemas.android.com/apk/res-auto"\n      xmlns:tools="http://schemas.android.com/tools">\n    <item\n        android:id="@+id/menu_search"\n        android:orderInCategory="100"\n        android:title="搜索"\n        app:actionViewClass="android.support.v7.widget.SearchView"\n        app:showAsAction="always"\n        />\n    <item\n        android:id="@+id/scan_local_music"\n        android:icon="@mipmap/lv"\n        android:orderInCategory="100"\n        android:title="扫描本地音乐"\n        app:showAsAction="never"\n        />\n    <item\n        android:id="@+id/select_sort_way"\n        android:icon="@mipmap/lt"\n        android:orderInCategory="100"\n        android:title="选择排序方式"\n        app:showAsAction="never"\n        />\n    <item\n        android:id="@+id/get_cover_lyrics"\n        android:icon="@mipmap/lq"\n        android:orderInCategory="100"\n        android:title="获取封面歌词"\n        app:showAsAction="never"\n        />\n    <item\n        android:id="@+id/imporve_tone_quality"\n        android:icon="@mipmap/lw"\n        android:orderInCategory="100"\n        android:title="升级音质"\n        app:showAsAction="never"\n        />\n</menu>\n')])])]),t("h4",{attrs:{id:"_2-在activity中设置menu的代码如下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-在activity中设置menu的代码如下"}},[e._v("#")]),e._v(" 2）在Activity中设置Menu的代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class SearchViewActivity2 extends AppCompatActivity {\n\n    private SearchView mSearchView;\n    ...\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.search_view, menu);\n        MenuItem searchItem = menu.findItem(R.id.menu_search);\n\n        //通过MenuItem得到SearchView\n        mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem);\n\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    // 让菜单同时显示图标和文字\n    @Override\n    public boolean onMenuOpened(int featureId, Menu menu) {\n        if (menu != null) {\n            if (menu.getClass().getSimpleName().equalsIgnoreCase("MenuBuilder")) {\n                try {\n                    Method method = menu.getClass().getDeclaredMethod("setOptionalIconsVisible", Boolean.TYPE);\n                    method.setAccessible(true);\n                    method.invoke(menu, true);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return super.onMenuOpened(featureId, menu);\n    }\n}\n')])])]),t("p",[e._v("到这里，除了搜索框（SearchView）以外，整个布局的效果大体上都实现了：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource20210320170901/image/20210107080717.gif",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_3、定制searchview样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、定制searchview样式"}},[e._v("#")]),e._v(" 3、定制SearchView样式")]),e._v(" "),t("p",[e._v("接下来要实现的样式自定义有：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080735.png",alt:""}})]),e._v(" "),t("p",[e._v("重点来了，我们先来分析一下。SearchView本身不向外提供 “关闭搜索框” 和 “设置搜索框左边的搜索图标” 等方法，所以需要通过其他的方式来实现样式自定义。")]),e._v(" "),t("h4",{attrs:{id:"考虑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#考虑"}},[e._v("#")]),e._v(" 考虑：")]),e._v(" "),t("p",[e._v("如果SearchView的布局结构是通过xml布局文件来实现的，那么可以通过SearchView.findViewById（）的方式得到其中的部分或所有的控件；如果是通过代码动态添加的话，那么可以通过反射的方式得到我们需要的控件，进而对控件进行样式设置。")]),e._v(" "),t("h4",{attrs:{id:"结论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[e._v("#")]),e._v(" 结论：")]),e._v(" "),t("p",[e._v("实现证明，SearchView的布局结构就是使用xml布局文件实现的，该xml文件名为abc_search_view.xml，且基本上每个控件都有id，这样就可以拿到需要的控件来实现样式自定义了。")]),e._v(" "),t("h4",{attrs:{id:"_1-点击返回按钮-退出搜索框-若搜索框显示的话"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-点击返回按钮-退出搜索框-若搜索框显示的话"}},[e._v("#")]),e._v(" 1）点击返回按钮，退出搜索框（若搜索框显示的话）")]),e._v(" "),t("p",[e._v("SearchView本身没有提供关闭搜索框的方法（反正我是没找到啊~~），不过SearchView中正好有一个onCloseClicked()方法是用来关闭搜索框，我们可以通过反射来调用该方法，先来理解下该方法都做了什么，onCloseClicked()的代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('void onCloseClicked() {\n    Editable text = this.mSearchSrcTextView.getText();\n\t//如果搜索框中有文字，则清除其中的文字\n    if(TextUtils.isEmpty(text)) {\n        if(this.mIconifiedByDefault && (this.mOnCloseListener == null || !this.mOnCloseListener.onClose())) {\n            this.clearFocus();\n            this.updateViewsVisibility(true);\n        }\n    } \n\t//否则关闭搜索框\n\telse {\n        this.mSearchSrcTextView.setText("");\n        this.mSearchSrcTextView.requestFocus();\n        this.setImeVisibility(true);\n    }\n}\n')])])]),t("p",[e._v("这里要考虑到，当搜索框显示时，按下Toolbar的返回按钮关闭搜索框，否则就关闭当前界面。因为搜索框也有id，所以我们可以通过id可以得到搜索框控件，用来判断当前搜索框的显隐状态。结合SearchView内部的onCloseClicked()方法，最后Toolbar返回按钮的点击事件代码可以这么写：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class SearchViewActivity2 extends AppCompatActivity {\n\n    private SearchView mSearchView;\n    private SearchView.SearchAutoComplete mSearchAutoComplete;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_search_view2);\n        ...\n\t\t//Toolbar返回按钮的点击事件\n        toolbar.setNavigationOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (mSearchAutoComplete.isShown()) {\n                    try {\n\t\t\t\t\t\t//如果搜索框中有文字，则会先清空文字，但网易云音乐是在点击返回键时直接关闭搜索框\n                        mSearchAutoComplete.setText("");\n                        Method method = mSearchView.getClass().getDeclaredMethod("onCloseClicked");\n                        method.setAccessible(true);\n                        method.invoke(mSearchView);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    finish();\n                }\n            }\n        });\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.search_view, menu);\n        MenuItem searchItem = menu.findItem(R.id.menu_search);\n\n        //通过MenuItem得到SearchView\n        mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem);\n\t\t//通过id得到搜索框控件\n        mSearchAutoComplete = (SearchView.SearchAutoComplete) mSearchView.findViewById(R.id.search_src_text);\n\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    ...\n}\n')])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080758.gif",alt:""}})]),e._v(" "),t("h4",{attrs:{id:"_2-隐藏搜索框左边的搜索图标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-隐藏搜索框左边的搜索图标"}},[e._v("#")]),e._v(" 2）隐藏搜索框左边的搜索图标")]),e._v(" "),t("p",[e._v("搜索框中左边的搜索图标不是一个控件，所以没办法通过id得到，但好在可以通过设置style的方式来修改SearchView所有的图标。方法也很简单，只需创建一个style（这里取名Widget.SearchView）继承自Widget.AppCompat.SearchView，然后替换需要修改的属性即可。先看下Widget.AppCompat.SearchView的父级Base.Widget.AppCompat.SearchView吧：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080835.png",alt:""}})]),e._v(" "),t("p",[e._v("可以看到，这个父级style提供了SearchView中几乎所有的Icon属性，这意味着在图标定制上可以有很大拓展性。其中，layout是指定SearchView的布局，原始布局就是abc_search_view.xml，我们一般不会去动这个属性。\n这里我们只需要去掉搜索框左边的图标（即：searchHintIcon），直接设置为@null就好了，如下修改style文件中的Widget.SearchView主题：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('\x3c!--没有ActionBar主题，自定义SearchView样式--\x3e\n<style name="AppTheme.NoActionBar2" parent="AppTheme">\n    ...\n    \x3c!--引入SearchView的自定义样式--\x3e\n    <item name="searchViewStyle">@style/Widget.SearchView</item>\n</style>\n\n<style name="Widget.SearchView" parent="Widget.AppCompat.SearchView">\n\t\x3c!--修改搜索框提示文字--\x3e\n    <item name="defaultQueryHint">搜索本地歌曲</item>\n\t\x3c!--修改打开搜索框的搜索按钮的图标--\x3e\n    <item name="searchIcon">@mipmap/m5</item>\n\t\x3c!--修改搜索框左边的搜索按钮图标--\x3e\n    <item name="searchHintIcon">@null</item>\n</style>\n')])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080813.png",alt:""}})]),e._v(" "),t("h4",{attrs:{id:"_3-设置搜索框的提示文字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-设置搜索框的提示文字"}},[e._v("#")]),e._v(" 3）设置搜索框的提示文字")]),e._v(" "),t("h5",{attrs:{id:"修改提示文字内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改提示文字内容"}},[e._v("#")]),e._v(" 修改提示文字内容")]),e._v(" "),t("p",[e._v("修改搜索框提示文字的方式有两种，一种就是修改SearchView的style，如上一步中，修改Widget.AppCompat.SearchView的defaultQueryHint属性；另一种方式是调用SearchView的setQueryHint()来修改。这两种方式都可以，如果同时用这两种方式来设置搜索框的提示语，则最终的提示内容将以代码设置方式为主。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.search_view, menu);\n    MenuItem searchItem = menu.findItem(R.id.menu_search);\n\n    //通过MenuItem得到SearchView\n    mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem);\n    mSearchAutoComplete = (SearchView.SearchAutoComplete) mSearchView.findViewById(R.id.search_src_text);\n\n\t//通过代码方式修改提示文字内容\n    mSearchView.setQueryHint("搜索本地歌曲by code");\n\n｝\n')])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080854.png",alt:""}})]),e._v(" "),t("h5",{attrs:{id:"修改提示文字样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改提示文字样式"}},[e._v("#")]),e._v(" 修改提示文字样式")]),e._v(" "),t("p",[e._v("SearchView也没有提供任何直接修改搜索框提示文字样式的方法，但既然我们可以通过id得到搜索框控件，那设置提示文字的样式便不是什么问题了，代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.search_view, menu);\n    MenuItem searchItem = menu.findItem(R.id.menu_search);\n\n    //通过MenuItem得到SearchView\n    mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem);\n    mSearchAutoComplete = (SearchView.SearchAutoComplete) mSearchView.findViewById(R.id.search_src_text);\n    mSearchView.setQueryHint("搜索本地歌曲by code");\n\n    //设置输入框提示文字样式\n    mSearchAutoComplete.setHintTextColor(getResources().getColor(android.R.color.darker_gray));\n    mSearchAutoComplete.setTextColor(getResources().getColor(android.R.color.background_light));\n    mSearchAutoComplete.setTextSize(14);\n\n    return super.onCreateOptionsMenu(menu);\n}\n')])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080907.png",alt:""}})]),e._v(" "),t("h4",{attrs:{id:"_4-根据搜索框中有无文字-来显隐搜索框右边的叉叉"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-根据搜索框中有无文字-来显隐搜索框右边的叉叉"}},[e._v("#")]),e._v(" 4）根据搜索框中有无文字，来显隐搜索框右边的叉叉")]),e._v(" "),t("p",[e._v("这个有点像searchView.onActionViewExpanded()的效果，唯一的区别就是搜索框不能是默认展开的，这要怎么办呢？通过观察onActionViewExpanded()的源码，可以发现该方法中调用了setIconified(false)！！！再联想到setIconified(false)本身就有让搜索框默认展开的效果，这是不是意味着，只要让onActionViewExpanded()的setIconified(false)改为setIconified(true)就好了呢？答案是是的。而且不需要重写SearchView，因为onActionViewExpanded()和setIconified(true)是可以搭配使用的，只要依次调用这两个方法就可以实现这种效果了，代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.search_view, menu);\n    MenuItem searchItem = menu.findItem(R.id.menu_search);\n\n    //通过MenuItem得到SearchView\n    mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem);\n    mSearchAutoComplete = (SearchView.SearchAutoComplete) mSearchView.findViewById(R.id.search_src_text);\n    mSearchView.setQueryHint("搜索本地歌曲by code");\n\n    //设置输入框提示文字样式\n    mSearchAutoComplete.setHintTextColor(getResources().getColor(android.R.color.darker_gray));\n    mSearchAutoComplete.setTextColor(getResources().getColor(android.R.color.background_light));\n    mSearchAutoComplete.setTextSize(14);\n\n    //设置搜索框有字时显示叉叉，无字时隐藏叉叉\n    mSearchView.onActionViewExpanded();\n    mSearchView.setIconified(true);\n\n    //修改搜索框控件间的间隔（这样只是为了在细节上更加接近网易云音乐的搜索框）\n    LinearLayout search_edit_frame = (LinearLayout) mSearchView.findViewById(R.id.search_edit_frame);\n    ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) search_edit_frame.getLayoutParams();\n    params.leftMargin = 0;\n    params.rightMargin = 0;\n    search_edit_frame.setLayoutParams(params);\n    return super.onCreateOptionsMenu(menu);\n}\n')])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080921.gif",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_4、实现搜索提示功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、实现搜索提示功能"}},[e._v("#")]),e._v(" 4、实现搜索提示功能")]),e._v(" "),t("p",[e._v("上面我们已经学习了SearchView的UI定制，下面将通过SearchView自身或结合ListView的方式（RecyclerView应该也一样吧，还没试过）直接学习SearchView搜索提示功能的实现，继续完善 “仿网易云音乐本地音乐搜索” 效果。")]),e._v(" "),t("h4",{attrs:{id:"_1-弹出式搜索提示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-弹出式搜索提示"}},[e._v("#")]),e._v(" 1）弹出式搜索提示")]),e._v(" "),t("p",[e._v("SearchView本身的搜索框就是AutoCompleteTextView的一个子类，有图有真相。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107080955.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107081005.png",alt:""}})]),e._v(" "),t("p",[e._v("AutoCompleteTextView是可以通过设置适配器来实现文本补全提示功能的，所以，SearchView中的搜索框一样也可以，不过SearchView提供了setSuggestionsAdapter()方法可以直接为搜索框设置适配器，需要注意的是，这个适配器必须跟数据库的Cursor对象一起使用，例如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('mSearchView.setSuggestionsAdapter(new SimpleCursorAdapter(SearchViewActivity2.this, R.layout.item_layout, cursor, new String[]{"name"}, new int[]{R.id.text1}));\n')])])]),t("p",[e._v("一般开发中遇到的需求是一边输入关键字一边显示搜索结果，所以需要监听搜索框的文字输入，一旦文字变化就查询数据库，更新搜索结果，所以代码可以这么写：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('// 监听搜索框文字变化\nmSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n    @Override\n    public boolean onQueryTextSubmit(String s) {\n        return false;\n    }\n\n    @Override\n    public boolean onQueryTextChange(String s) {\n        Cursor cursor = TextUtils.isEmpty(s) ? null : queryData(s);\n\t\t// 不要频繁创建适配器，如果适配器已经存在，则只需要更新适配器中的cursor对象即可。\n        if (mSearchView.getSuggestionsAdapter() == null) {\n            mSearchView.setSuggestionsAdapter(new SimpleCursorAdapter(SearchViewActivity2.this, R.layout.item_layout, cursor, new String[]{"name"}, new int[]{R.id.text1}));\n        } else {\n            mSearchView.getSuggestionsAdapter().changeCursor(cursor);\n        }\n\n        return false;\n    }\n});\n')])])]),t("p",[e._v("对于SimpleCursorAdapter的使用，不熟悉的自己百度学习吧，下面看效果：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource20210320170901/image/20210107081023.gif",alt:""}})]),e._v(" "),t("p",[e._v('可以发现，当输入第一个文字"a"时，没有什么反应，当输入第二个文字"a"时，弹出了一个列表弹窗，这是由于AutoCompleteTextView本身默认触发查询动作的条件就是该控件中的文字至少要2个以上，如果我们想修改成只要有一个文字就触发查询的话，则可以这么做：')]),e._v(" "),t("ol",[t("li",[e._v("拿到SearchView中搜索框控件")]),e._v(" "),t("li",[e._v("调用setThreshold()设置触发查询的字数")])]),e._v(" "),t("p",[e._v("直接上代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.search_view, menu);\n    MenuItem searchItem = menu.findItem(R.id.menu_search);\n\n    //通过MenuItem得到SearchView\n    mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem);\n    mSearchAutoComplete = (SearchView.SearchAutoComplete) mSearchView.findViewById(R.id.search_src_text);\n    ...\n    //设置触发查询的最少字符数（默认2个字符才会触发查询）\n    mSearchAutoComplete.setThreshold(1);\n｝\n")])])]),t("p",[e._v("再看下效果：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource20210320170901/image/20210107081039.gif",alt:""}})]),e._v(" "),t("p",[e._v("好了，弹出式搜索功能做完了，下面贴出条目布局item_layout.xml和queryData()方法的代码实现：")]),e._v(" "),t("h5",{attrs:{id:"_1-item-layout-xml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-item-layout-xml"}},[e._v("#")]),e._v(" ① item_layout.xml")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('<?xml version="1.0" encoding="utf-8"?>\n<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n              android:layout_width="match_parent"\n              android:layout_height="match_parent"\n              android:orientation="vertical">\n    \n    <TextView\n        android:id="@+id/text1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:gravity="center_vertical"\n        android:minHeight="?android:attr/listPreferredItemHeightSmall"\n        android:paddingLeft="10dp"\n        android:paddingRight="10dp"\n        android:textAppearance="?android:attr/textAppearanceListItemSmall"\n        android:textColor="@android:color/black"/>\n</LinearLayout>\n')])])]),t("h5",{attrs:{id:"_2-querydata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-querydata"}},[e._v("#")]),e._v(" ② queryData()")]),e._v(" "),t("p",[e._v("只是简单的创建一个数据库（music.db），库中有一张tb_music表，表中有_id和name两个字段，然后填充数据，查询数据，相对比较简单，这里就不做过多解释了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('private Cursor queryData(String key) {\n    SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(getFilesDir() + "music.db", null);\n    Cursor cursor = null;\n    try {\n        String querySql = "select * from tb_music where name like \'%" + key + "%\'";\n        cursor = db.rawQuery(querySql, null);\n    } catch (Exception e) {\n        e.printStackTrace();\n        String createSql = "create table tb_music (_id integer primary key autoincrement,name varchar(100))";\n        db.execSQL(createSql);\n\n        String insertSql = "insert into tb_music values (null,?)";\n        for (int i = 0; i < Cheeses.sCheeseStrings.length; i++) {\n            db.execSQL(insertSql, new String[]{Cheeses.sCheeseStrings[i]});\n        }\n\n        String querySql = "select * from tb_music where name like \'%" + key + "%\'";\n        cursor = db.rawQuery(querySql, null);\n    }\n    return cursor;\n}\n')])])]),t("h4",{attrs:{id:"_2-结合listview实现搜索提示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-结合listview实现搜索提示"}},[e._v("#")]),e._v(" 2）结合ListView实现搜索提示")]),e._v(" "),t("p",[e._v("虽然上面已经实现了搜索提示的功能，但网易云音乐本地搜索出来的结果并不是弹出式的，而是在SearchView下方以列表的方式呈现，要做到这样的效果，就必需让SearchView结合ListView一起使用。其实这并不难，因为AutoCompleteTextView设置的适配器跟ListView要设置的适配器是一样的，直接将上边的适配器设置给ListView即可。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('// 监听搜索框文字变化\nmSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n    @Override\n    public boolean onQueryTextSubmit(String s) {\n        return false;\n    }\n\n    @Override\n    public boolean onQueryTextChange(String s) {\n        Cursor cursor = TextUtils.isEmpty(s) ? null : queryData(s);\n\t\t// 设置或更新ListView的适配器\n        setAdapter(cursor);\n        return false;\n    }\n});\n\nprivate void setAdapter(Cursor cursor) {\n    if (mLv.getAdapter() == null) {\n        SimpleCursorAdapter adapter = new SimpleCursorAdapter(SearchViewActivity2.this, R.layout.item_layout, cursor, new String[]{"name"}, new int[]{R.id.text1});\n        mLv.setAdapter(adapter);\n    } else {\n        ((SimpleCursorAdapter) mLv.getAdapter()).changeCursor(cursor);\n    }\n}\n')])])]),t("p",[e._v("这样就完成了，虽然样式上是丑了点，但，那又怎样，呵呵~")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource20210320170901/image/20210107081102.gif",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"最后附上demo链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最后附上demo链接"}},[e._v("#")]),e._v(" 最后附上Demo链接")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/GitLqr/MaterialDesignDemo",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/GitLqr/MaterialDesignDemo"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{437:function(a,t,e){"use strict";e.r(t);var s=e(15),n=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110205904.png",alt:""}})]),a._v(" "),t("blockquote",[t("p",[a._v("在第一次组件化的时候，需要执行很多操作，这些操作可以在【"),t("RouterLink",{attrs:{to:"/pages/d4ac48/"}},[a._v("iOS-组件化开发（一）：远程私有库的基本使用")]),a._v("】，这里就不再赘述，在组件化后的重复性操作就是升级，而升级这个过程是一模一样的。那么，我们有什么办法可以很方便的搞定这一过程来节约我们大量的时间呢？")],1)]),a._v(" "),t("h2",{attrs:{id:"一、升级必备操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、升级必备操作"}},[a._v("#")]),a._v(" 一、升级必备操作")]),a._v(" "),t("p",[a._v("修改完核心代码后，一共还需要做以下几步："),t("br"),a._v("\n1、修改spec文件（修改s.version，s.description等）"),t("br"),a._v("\n2、"),t("code",[a._v("pod install")]),a._v(" （使Example与pod下来的库产生关联）"),t("br"),a._v("\n3、提交本地仓库代码至远程仓库"),t("br"),a._v("\n4、打标签，并提交至远程"),t("br"),a._v("\n5、验证spec，并提至私有索引库")]),a._v(" "),t("h2",{attrs:{id:"二、fastlane"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、fastlane"}},[a._v("#")]),a._v(" 二、Fastlane")]),a._v(" "),t("h3",{attrs:{id:"_1、简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、简介"}},[a._v("#")]),a._v(" 1、简介")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://docs.fastlane.tools/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Fastlane文档说明 "),t("OutboundLink")],1),a._v("\nFastlane是一个ruby脚本集合，它可以按照我们指定的路线，在指定位置执行我们所要执行的操作。这里我们称这样的路线为「航道(lane)」，这样的操作称为「Action」")]),a._v(" "),t("p",[a._v("Action是Fastlane自动化流程中的最小执行单元，用来执行Fastlane脚本中的命令，关于更多的描述可以到"),t("a",{attrs:{href:"https://docs.fastlane.tools/actions/Actions/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Actions - fastlane docs"),t("OutboundLink")],1),a._v("查看，里面也介绍了常用的action有哪些，顺带附上"),t("a",{attrs:{href:"https://github.com/fastlane/fastlane/tree/master/fastlane/lib/fastlane/actions",target:"_blank",rel:"noopener noreferrer"}},[a._v("action的源码地址"),t("OutboundLink")],1),a._v("，这个源码在后面自定义起参考作用")]),a._v(" "),t("h3",{attrs:{id:"_2、-安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、-安装"}},[a._v("#")]),a._v(" 2、 安装")]),a._v(" "),t("ul",[t("li",[a._v("确保ruby为最新版本")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("brew update\nbrew install ruby\n")])])]),t("ul",[t("li",[a._v("安装fastlane")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("sudo gem install -n /usr/local/bin fastlane\n")])])]),t("ul",[t("li",[a._v("查看当前fastlane版本")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("fastlane --version\n")])])]),t("ul",[t("li",[a._v("查看所有action")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("fastlane actions\n")])])]),t("h3",{attrs:{id:"三、fastlane初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、fastlane初始化"}},[a._v("#")]),a._v(" 三、fastlane初始化")]),a._v(" "),t("p",[a._v("cd到你的本地组件仓库的根目录")]),a._v(" "),t("ul",[t("li",[t("s",[a._v("初始化fastlane")]),a._v(" "),t("s",[t("code",[a._v("fastlane init")])]),a._v(" "),t("s",[a._v("不过这个步骤对我们来说可以跳过，在init后提示你输入一些东西，包括上传需要用到的APPLE ID什么的一堆东西，由于我们并不涉及这些，所以我们使用更方便的方式")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("# 创建一个fastlane文件夹\n# 进入fastlane目录\n# 创建一个Fastfile文件\nmkdir fastlane\ncd fastlane\ntouch Fastfile\n")])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210019.png",alt:"目录结构"}})]),a._v(" "),t("h3",{attrs:{id:"_1、修改fastfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、修改fastfile"}},[a._v("#")]),a._v(" 1、修改Fastfile")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("desc '描述航道作用'\nlane :航道名称 do |options|\n\n// options 可以用来传递参数\n// 示例：varName = options[:name]\n\n// 航道上需要执行的操作\n\nend\n")])])]),t("p",[a._v("航道上要扫描的操作可以到"),t("a",{attrs:{href:"https://docs.fastlane.tools/actions",target:"_blank",rel:"noopener noreferrer"}},[a._v("Actions"),t("OutboundLink")],1),a._v("上查找，可以通过关键字搜索，如下图")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210032.png",alt:"cocoapods"}})]),a._v(" "),t("p",[a._v("点进去可以看到具体的使用及参数说明")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210045.png",alt:"使用说明"}})]),a._v(" "),t("p",[a._v("这里附上本人的Fastfile内容：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('desc \'LXFUpdatePodTool 航道用来自动化升级维护私有库\'\nlane : LXFUpdatePodTool do |options|\n\ntagNum = options[:tag]\npodspecName = options[:specName]\n\n# 航道上需要执行的操作\n# 具体action到 https://docs.fastlane.tools/actions 上面查找\n# 这里的路径以仓库根目录为准\n\n# 1、修改spec文件（修改s.version，s.description等）\n# 2、pod install （使Example与pod下来的库产生关联）\ncocoapods(\n  clean: true,\n  podfile: "./Example/Podfile"\n)\n\n\n# 3、提交本地仓库代码至远程仓库\ngit_add(path: ".")\ngit_commit(path: ".", message: "upgrade repo")\npush_to_git_remote\n\n\n# 4、打标签，并提交至远程\nadd_git_tag(\n  tag: tagNum\n)\npush_git_tags\n\n\n# 5、验证spec，并提至私有索引库\npod_lib_lint(allow_warnings: true)\n# 因为本地索引库repo的名字是基本上不会去改变的，所以这里直接写死 LXFSpecs\n# podspec的名字需要由外界传入\npod_push(path: "#{podspecName}.podspec", repo: "LXFSpecs")\n\n\nend\n')])])]),t("h3",{attrs:{id:"_2、验证fastfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、验证fastfile"}},[a._v("#")]),a._v(" 2、验证Fastfile")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("fastlane lanes\n")])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210059.png",alt:"Fastfile验证成功"}})]),a._v(" "),t("h3",{attrs:{id:"_3、执行fastlane"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、执行fastlane"}},[a._v("#")]),a._v(" 3、执行fastlane")]),a._v(" "),t("p",[t("strong",[a._v("需要在组件仓库的根目录下执行")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210110.png",alt:"根目录"}})]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("fastlane LXFUpdatePodTool tag:0.1.1 specName:LXFMain\n")])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210122.png",alt:"开始执行"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210139.png",alt:"上传完成"}})]),a._v(" "),t("p",[a._v("整个执行过程不超过30秒～")]),a._v(" "),t("h2",{attrs:{id:"四、自定义action"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、自定义action"}},[a._v("#")]),a._v(" 四、自定义Action")]),a._v(" "),t("p",[a._v("以上的过程已经可以完成一整个自动化更新了，但是有一点需要注意的是，这个输入的tag可能会面临一个问题，那就是本地和远程都可能已经存在，即发生冲突，这个时候我们可以选择自动删除本地和远程冲突的那个tag，再重新上传当前tag")]),a._v(" "),t("h3",{attrs:{id:"_1、创建一个新的action"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、创建一个新的action"}},[a._v("#")]),a._v(" 1、创建一个新的action")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("fastlane new_action\n")])])]),t("p",[a._v("按要求输入Action名称")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210615.png",alt:"输入action名称"}})]),a._v(" "),t("p",[a._v("完成后fastlane目录下就会多出一个名为actions的文件夹，里面存放的就是你自定义action")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210637.png",alt:""}})]),a._v(" "),t("h3",{attrs:{id:"_2、编辑自定义action"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、编辑自定义action"}},[a._v("#")]),a._v(" 2、编辑自定义action")]),a._v(" "),t("p",[a._v("打开remove_git_tag.rb，开始自定义我们的action吧，什么？不会语法怎么办？可以参考别人的嘛，上面给出的"),t("a",{attrs:{href:"https://github.com/fastlane/fastlane/tree/master/fastlane/lib/fastlane/actions",target:"_blank",rel:"noopener noreferrer"}},[a._v("action的源码地址"),t("OutboundLink")],1),a._v("就有用武之地了，比如"),t("a",{attrs:{href:"https://github.com/fastlane/fastlane/blob/master/fastlane/lib/fastlane/actions/pod_push.rb",target:"_blank",rel:"noopener noreferrer"}},[a._v("pod_push"),t("OutboundLink")],1),a._v("。这里我直接贴出我已经完成的主要代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('# 可以使用 fastlane action remove_git_tag 来参看详细描述\n\ndef self.run(params)\n  # 这里写要执行的操作 \n  # params[:参数名称] 参数名称与下面self.available_options中的保持一致\n  tagNum = params[:tagNum]\n  rmLocalTag = params[:rmLocalTag]\n  rmRemoteTag = params[:rmRemoteTag]\n\n  command = []\n  if rmLocalTag\n    # 删除本地标签\n    # git tag -d 标签名称\n    command << "git tag -d #{tagNum}"\n  end\n  if rmRemoteTag\n    # 删除远程标签\n    # git push origin :标签名称\n    command << "git push origin :#{tagNum}"\n  end\n\n  result = Actions.sh(command.join(\'&\'))\n  UI.success("Successfully remove tag 🚀 ")\n  return result\n\nend\n\ndef self.description\n  # 对当前脚本的简单描述\n  "删除tag"\nend\n\ndef self.details\n  # 对当前脚本的具体描述\n  "使用当前action来删除本地和远程冲突的tag"\nend\n\ndef self.available_options\n  # 用来传递参数\n  [ \n    FastlaneCore::ConfigItem.new(key: :tagNum,\n                                  description: "输入即将删除的tag",\n                                  is_string: true),\n    FastlaneCore::ConfigItem.new(key: :rmLocalTag,\n                                  description: "是否删除本地tag",\n                                  optional:true,\n                                  is_string: false,\n                                  default_value: true),\n    FastlaneCore::ConfigItem.new(key: :rmRemoteTag,\n                                  description: "是否删除远程tag",\n                                  optional:true,\n                                  is_string: false,\n                                  default_value: true)\n  ]\nend\n\ndef self.authors\n  # 作者姓名\n  ["LinXunFeng"]\nend\n')])])]),t("h3",{attrs:{id:"_3、查看action描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、查看action描述"}},[a._v("#")]),a._v(" 3、查看action描述")]),a._v(" "),t("p",[a._v("同样，这里先cd到组件库的根目录下执行，原因是这个自定义action只存在当前根目录下的fastlane中，其它fastlane的非自定义的action就不用在当前根目录下操作～")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("fastlane action remove_git_tag\n")])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210758.png",alt:"查看具体描述"}})]),a._v(" "),t("h3",{attrs:{id:"_4、测试执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、测试执行"}},[a._v("#")]),a._v(" 4、测试执行")]),a._v(" "),t("p",[a._v("先来看看当前组件库已存在的tag")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("git tag\n")])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210848.png",alt:"已存在的tag"}})]),a._v(" "),t("p",[a._v("可以看到，我是已经有一个"),t("code",[a._v("0.1.1")]),a._v("版本的了。这时我们再来执行一次LXFUpdatePodTool航道")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("fastlane LXFUpdatePodTool tag:0.1.1 specName:LXFMain\n")])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210110210903.png",alt:"自动清除"}})]),a._v(" "),t("h2",{attrs:{id:"五、工具拿走"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、工具拿走"}},[a._v("#")]),a._v(" 五、工具拿走")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/LinXunFeng/LXFUpdatePodTool",target:"_blank",rel:"noopener noreferrer"}},[a._v("LXFUpdatePodTool"),t("OutboundLink")],1),a._v(" 已经传到我的GitHub上，需要的同学就拿走吧，顺手给个Star咯 Orz")])])}),[],!1,null,null,null);t.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{379:function(t,a,s){"use strict";s.r(a);var e=s(15),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、系统签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、系统签名"}},[t._v("#")]),t._v(" 一、系统签名")]),t._v(" "),a("p",[t._v("以下是两类应用开发场景：")]),t._v(" "),a("ul",[a("li",[t._v("普通应用开发：使用公司自定义 "),a("code",[t._v("keystore")]),t._v(" 进行签名，如：微信、支付宝")]),t._v(" "),a("li",[t._v("系统应用开发：使用 AOSP 系统签名或厂商自定义 "),a("code",[t._v("keystore")]),t._v(" 进行签名，如：设置、录音")])]),t._v(" "),a("p",[t._v("系统应用开发相对于普通应用开发拥有更高的权限，可以使用一些系统级别的 API，比如：")]),t._v(" "),a("ul",[a("li",[t._v("静默安装（"),a("code",[t._v("android.permission.INSTALL_PACKAGES")]),t._v("）")]),t._v(" "),a("li",[t._v("屏幕抓取（"),a("code",[t._v("SurfaceControl#createDisplay")]),t._v("）")]),t._v(" "),a("li",[t._v("设备音频抓取（"),a("code",[t._v("AudioSource.REMOTE_SUBMIX")]),t._v("）")]),t._v(" "),a("li",[t._v("应用外悬浮窗")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("p",[t._v("系统应用开发只适用于以下几类开发者：")]),t._v(" "),a("ul",[a("li",[t._v("Android 系统定制开发者（自主拥有系统签名）")]),t._v(" "),a("li",[t._v("Android 系统厂商合作开发者（能拿到厂商的自定义系统签名）")])]),t._v(" "),a("blockquote",[a("p",[t._v("温馨提示：如果你不属于以上类别，那么你要清楚，没有系统签名一切都是空谈。")])]),t._v(" "),a("h3",{attrs:{id:"_1、配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、配置"}},[t._v("#")]),t._v(" 1、配置")]),t._v(" "),a("p",[t._v("系统应用开发需要在清单文件根节点指定 "),a("code",[t._v("sharedUserId")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token prolog"}},[t._v('<?xml version="1.0" encoding="utf-8"?>')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("manifest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("xmlns:")]),t._v("android")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://schemas.android.com/apk/res/android"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("android:")]),t._v("sharedUserId")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("android.uid.system"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    ...\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("manifest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h3",{attrs:{id:"_2、签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、签名"}},[t._v("#")]),t._v(" 2、签名")]),t._v(" "),a("p",[t._v("配置完 "),a("code",[t._v('android:sharedUserId="android.uid.system"')]),t._v(" 之后，此时的 app 是无法成功安装到设备的，控制台会提示 "),a("code",[t._v("INSTALL_FAILED_SHARED_USER_INCOMPATIBLE")]),t._v("，这是因为此时 app 已经被识别为系统应用，但是其签名信息却不是系统签名，于是无法通过系统检验。进行系统签名需要准备好如下几个文件：")]),t._v(" "),a("ul",[a("li",[t._v("platform.pk8：签名证书")]),t._v(" "),a("li",[t._v("platform.x509.pem：签名证书")]),t._v(" "),a("li",[t._v("signapk.jar：签名工具")])]),t._v(" "),a("p",[t._v("如果你的设备是纯纯的原生系统（AOSP），那么可以在以下网址中找到这几个签名文件：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/aosp-mirror/platform_build/tree/master/target/product/security",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/aosp-mirror/platform_build/tree/master/target/product/security"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/techexpertize/SignApk",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/techexpertize/SignApk"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/maks/aosp-signapk",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/maks/aosp-signapk"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("注：如果是 "),a("code",[t._v("Android 系统厂商合作开发")]),t._v(" 这种场景（自定义过系统签名），那么以上文件应该让合作厂商提供。")])]),t._v(" "),a("p",[t._v("签名文件准备好之后，就可以通过以下命令对 "),a("code",[t._v("app-unsigned.apk")]),t._v(" 进行系统签名了：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-jar")]),t._v(" signapk.jar platform.x509.pem platform.pk8 app-unsigned.apk signed.apk\n")])])]),a("p",[t._v("命令执行之后，生成出来的 "),a("code",[t._v("signed.apk")]),t._v(" 文件就已经是经过系统签名的了。")]),t._v(" "),a("h3",{attrs:{id:"_3、安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、安装"}},[t._v("#")]),t._v(" 3、安装")]),t._v(" "),a("p",[t._v("执行 "),a("code",[t._v("adb install signed.apk")]),t._v(" 命令后，发现这次就可以正常安装了。通过 "),a("code",[t._v("adb install")]),t._v(" 这种方式，就跟我们平时普通应用开发一样，apk 会被安装到 "),a("code",[t._v("/data/app/")]),t._v(" 目录下，但是因为指定了 "),a("code",[t._v('android:sharedUserId="android.uid.system"')]),t._v("，所以，这时的 app 会被认为是系统应用，可以使用系统权限。")]),t._v(" "),a("blockquote",[a("p",[t._v("注：除了 "),a("code",[t._v("android.uid.system")]),t._v(" 以外，"),a("code",[t._v("sharedUserId")]),t._v(" 还可以指定其他值，详情说明可通过以下文章了解："),a("a",{attrs:{href:"https://www.cnblogs.com/scarecrow-blog/p/4876628.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/scarecrow-blog/p/4876628.html"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("另外，如果你是 Android 系统定制开发者，你也可以将该 apk 文件放置到 "),a("code",[t._v("/system/app")]),t._v(" 或 "),a("code",[t._v("/system/priv-app")]),t._v(" 目录下，之后 系统烧录 或 OTA 升级时就会自动携带上该系统应用。")]),t._v(" "),a("h2",{attrs:{id:"二、自动签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、自动签名"}},[t._v("#")]),t._v(" 二、自动签名")]),t._v(" "),a("p",[t._v("经过上面的几个步骤后，我们确定能将自己开发好的系统应用成功安装到设备上，但是，你会发现签名环节太麻烦了，每次都要手动对 apk 进行签名，非常不利于开发和调试。当然，我们可以通过编写 gradle 脚本，在项目每次编译完成时，执行自动签名任务，但是这种方式并不是最优解，还有一种更简单的方式。")]),t._v(" "),a("h3",{attrs:{id:"_1、生成系统签名文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、生成系统签名文件"}},[t._v("#")]),t._v(" 1、生成系统签名文件")]),t._v(" "),a("p",[t._v("我们知道，Android 项目中可以在 "),a("code",[t._v("build.gradle")]),t._v(" 文件的 "),a("code",[t._v("signingConfigs")]),t._v(" 域中配置我们的自定义签名文件（"),a("code",[t._v("*.jks")]),t._v("），在配置好 "),a("code",[t._v("buildTypes")]),t._v(" 之后，每次编译时 gradle 都会自动对 apk 进行签名，那这个签名文件（"),a("code",[t._v("*.jks")]),t._v("）能不能是系统签名文件呢？答案是可以的。"),a("code",[t._v("keytool-importkeypair")]),t._v(" 这个工具可以将系统签名信息（"),a("code",[t._v("*.pk8")]),t._v("、"),a("code",[t._v("*.pem")]),t._v("）导入到现有签名文件中（"),a("code",[t._v("*.jks")]),t._v("），以下是它的仓库地址：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/getfatday/keytool-importkeypair",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/getfatday/keytool-importkeypair"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("将仓库中的 "),a("code",[t._v("keytool-importkeypair")]),t._v(" 文件下载下来，然后执行以下命令：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 语法：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# keytool-importkeypair [-k keystore] [-p storepass] -pk8 pk8 -cert cert -alias key_alias")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例：")]),t._v("\nkeytool-importkeypair "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-k")]),t._v(" platform.jks "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123456")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-pk8")]),t._v(" platform.pk8 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-cert")]),t._v(" platform.x509.pem "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-alias")]),t._v(" platform\n")])])]),a("blockquote",[a("p",[t._v("注：上面示例中 "),a("code",[t._v("platform.jks")]),t._v(" 是我自己创建的签名文件（不知道怎么创建签名文件的请自行 ChatGPT~），请根据你自己项目的实际情况，修改 "),a("code",[t._v("keystore、storepass、key_alias")]),t._v(" 等参数。")])]),t._v(" "),a("p",[t._v("有一点需要特别注意，"),a("code",[t._v("keytool-importkeypair")]),t._v(" 是 shell 脚本，在 Unix 系统下可以直接运行，但是在 Windows 系统下（cmd 或 PowerShell）是无法直接运行的，这时可以借助 "),a("code",[t._v("Git Bash")]),t._v(" 来执行该命令。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource20220417121922/image/202302111514774.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("注：如果你的 "),a("code",[t._v("Git Bash")]),t._v(" 出现乱码，可以在右键->Options->Text，将 "),a("code",[t._v("Locale")]),t._v(" 设置为 "),a("code",[t._v("zh_CN")]),t._v("，"),a("code",[t._v("Character set")]),t._v(" 设置为 "),a("code",[t._v("GBK")]),t._v(" 即可。如果还是乱码，那么改成 "),a("code",[t._v("UTF8")]),t._v(" 等其他字符集逐个试试吧~。")])]),t._v(" "),a("p",[t._v("执行命令后，原本的 "),a("code",[t._v("platform.jks")]),t._v(" 文件会被覆盖成拥有系统签名信息的签名文件了。")]),t._v(" "),a("h3",{attrs:{id:"_2、配置系统签名文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、配置系统签名文件"}},[t._v("#")]),t._v(" 2、配置系统签名文件")]),t._v(" "),a("p",[t._v("接下来就跟普通应用开发一样，在 app 工程的 "),a("code",[t._v("build.gradle")]),t._v(" 文件中配置一下签名就好了：")]),t._v(" "),a("div",{staticClass:"language-gradle extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gradle"}},[a("code",[t._v("android "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n    signingConfigs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        platform "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            storeFile "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../config/signing/platform.jks'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            storePassword "),a("span",{pre:!0,attrs:{class:"token interpolation-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456"')])]),t._v("\n            keyAlias "),a("span",{pre:!0,attrs:{class:"token interpolation-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"platform"')])]),t._v("\n            keyPassword "),a("span",{pre:!0,attrs:{class:"token interpolation-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456"')])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    buildTypes "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        release "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            minifyEnabled "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n            proguardFiles "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDefaultProguardFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'proguard-android-optimize.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'proguard-rules.pro'")]),t._v("\n            signingConfig signingConfigs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("platform\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        debug "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buildTypes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("release"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            debuggable "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n            minifyEnabled "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("注："),a("code",[t._v("initWith(otherBuildType)")]),t._v(" 可以让当前 "),a("code",[t._v("buildType")]),t._v("（debug）复制其他 "),a("code",[t._v("buildType")]),t._v("（release）的配置，减少相同配置的代码量。虽然这很方便，但是一定要注意，如果是 debug 构建类型，一定要指定其 "),a("code",[t._v("debuggable")]),t._v(" 为 true（因为 release 的 "),a("code",[t._v("debuggable")]),t._v(" 默认为 false），否则你的工程可能会无法进入 debug 模式。")])]),t._v(" "),a("p",[t._v("至此，我们就可以像普通应用开发那样，愉快的开发系统应用了。")])])}),[],!1,null,null,null);a.default=r.exports}}]);
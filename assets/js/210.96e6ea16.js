(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{619:function(t,a,s){"use strict";s.r(a);var n=s(21),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),a("p",[t._v("Kotlin 中的常量使用 "),a("code",[t._v("val")]),t._v(' 修改，一旦定义值后"不可再修改"，常量类型分 2 种：')]),t._v(" "),a("ul",[a("li",[t._v("运行时常量("),a("code",[t._v("val")]),t._v(")：编译期不能确定它的值，代码中会保留变量对它的引用。")]),t._v(" "),a("li",[t._v("编译期常量("),a("code",[t._v("const val")]),t._v(")：编译期就知道值，并且会把代码中所有对它的引用都替换成它的值。")])]),t._v(" "),a("p",[t._v("下面我们来举例看看，这两者在代码层面上的区别到底是什么。")]),t._v(" "),a("h3",{attrs:{id:"运行时常量-val"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量-val"}},[t._v("#")]),t._v(" 运行时常量("),a("code",[t._v("val")]),t._v(")")]),t._v(" "),a("p",[t._v("这是一段很简单的 Kotlin 代码，先定义一个常量 FINAL_NAME，再定义一个变量 myName 引用常量 FINAL_NAME：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" FINAL_NAME"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lqr"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" FINAL_NAME\n")])])]),a("p",[t._v("通过 IDEA 自带的 "),a("code",[t._v("Show Kotlin Bytecode")]),t._v(" 工具将 Kotlin 代码转换成二进制，再反编译成 Java 代码：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NotNull")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FINAL_NAME")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lqr"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NotNull")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" myName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    myName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FINAL_NAME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("结论：Kotlin 中变量对 "),a("code",[t._v("val常量")]),t._v(" 的引用，会转变成 java 语言在 static 代码块中的赋值语句，即变量在编译期只保留了 "),a("code",[t._v("val常量")]),t._v(" 的引用。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Show Kotlin Bytecode")]),t._v(" 工具所在路径：Tools -> Kotlin -> Show Kotlin Bytecode")])]),t._v(" "),a("h3",{attrs:{id:"编译期常量-const-val"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译期常量-const-val"}},[t._v("#")]),t._v(" 编译期常量("),a("code",[t._v("const val")]),t._v(")")]),t._v(" "),a("p",[t._v("跟上面一样，先定义一个常量 FINAL_CONST_NAME，再定义一个变量 myConstName 引用常量 FINAL_CONST_NAME：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" FINAL_CONST_NAME"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lqr"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myConstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" FINAL_CONST_NAME\n")])])]),a("p",[t._v("通过 IDEA 自带的 "),a("code",[t._v("Show Kotlin Bytecode")]),t._v(" 工具将 Kotlin 代码转换成二进制，再反编译成 Java 代码：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NotNull")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FINAL_CONST_NAME")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lqr"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NotNull")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" myConstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lqr"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("结论：Kotlin 中变量对 "),a("code",[t._v("const val常量")]),t._v(" 的引用，会转变成直接赋值语句，即编译期会把代码中所有对 "),a("code",[t._v("const val常量")]),t._v(" 的引用都替换成它的值。")]),t._v(" "),a("blockquote",[a("p",[t._v("Kotlin 中 "),a("code",[t._v("val常量")]),t._v(" 仅仅只是类似 Java 中的 final 常量而已，而 "),a("code",[t._v("const val")]),t._v(" 常量，才是真正对应 Java 中的 final 常量。因为 Java 中的 final 常量是编译期常量。")])]),t._v(" "),a("h2",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),a("p",[t._v("与常量不同，变量是后续可修改的，Kotlin 中使用 "),a("code",[t._v("var")]),t._v(" 定义：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lqr"')])]),t._v("\nmyName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"吴彦祖"')])]),t._v("\n")])])]),a("p",[t._v("那如果对 "),a("code",[t._v("val常量")]),t._v(" 再执行赋值操作会怎样呢？")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" FINAL_NAME"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lqr"')])]),t._v("\nFINAL_NAME "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"吴彦祖"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错：Val cannot be reassigned")]),t._v("\n")])])]),a("p",[a("code",[t._v("val常量")]),t._v(" 如此，"),a("code",[t._v("const val常量")]),t._v(" 也是一样的，就不多废话了。")]),t._v(" "),a("h2",{attrs:{id:"类型推导"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型推导"}},[t._v("#")]),t._v(" 类型推导")]),t._v(" "),a("p",[t._v("Kotlin 支持类型推导，当常量或变量在定义并且赋值时，Kotlin 就已经明确了该常量或变量的类型，于是常量或变量的类型可省略：")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 推导出 String 类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Int 类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String 类型")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("注意：Kotlin 是支持类型推导的强类型语言，不同于 python、js 中的动态类型，Kotlin 中一旦确定了变量类型，后续将不可修改。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);
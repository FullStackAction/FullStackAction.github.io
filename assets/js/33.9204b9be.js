(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{445:function(t,e,a){"use strict";a.r(e);var r=a(21),o=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"一、简述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、简述"}},[t._v("#")]),t._v(" 一、简述")]),t._v(" "),e("p",[t._v("LayoutInflater直译为 布局填充器，它是用来创建布局视图的，常用inflate()将一个xml布局文件转换成一个View，下面先介绍下获取LayoutInflater的三种方式 和 创建View的两种方式。")]),t._v(" "),e("h3",{attrs:{id:"_1、获取layoutinflater的三种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、获取layoutinflater的三种方式"}},[t._v("#")]),t._v(" 1、获取LayoutInflater的三种方式")]),t._v(" "),e("ol",[e("li",[t._v("LayoutInflater inflater = getLayoutInflater();  //调用Activity的getLayoutInflater()")]),t._v(" "),e("li",[t._v("LayoutInflater inflater =(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);")]),t._v(" "),e("li",[t._v("LayoutInflater inflater = LayoutInflater.from(context);")])]),t._v(" "),e("p",[t._v("其实不管是哪种方式，最后都是通过方式2获取到LayoutInflater的，如：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082312.png",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_2、创建view的两种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、创建view的两种方式"}},[t._v("#")]),t._v(" 2、创建View的两种方式")]),t._v(" "),e("ol",[e("li",[t._v("View.inflate();")]),t._v(" "),e("li",[t._v("LayoutInflater.from(context).inflate();")])]),t._v(" "),e("h2",{attrs:{id:"二、源码分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、源码分析"}},[t._v("#")]),t._v(" 二、源码分析")]),t._v(" "),e("p",[t._v("上面两种创建View的方式都是开发中常用的，那两者有什么关系吗？下面对View.inflate()进行方法调用分析：")]),t._v(" "),e("h3",{attrs:{id:"_1、view-inflate-最终调用方法探究"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、view-inflate-最终调用方法探究"}},[t._v("#")]),t._v(" 1、View.inflate()最终调用方法探究")]),t._v(" "),e("h4",{attrs:{id:"_1-按住ctrl-鼠标左键查看view-inflate-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-按住ctrl-鼠标左键查看view-inflate-方法"}},[t._v("#")]),t._v(" 1）按住Ctrl+鼠标左键查看View.inflate()方法")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082326.png",alt:""}})]),t._v(" "),e("p",[t._v("可以看到View.inflate()就是调用了LayoutInflater.from(context).inflate()。")]),t._v(" "),e("p",[t._v("好，到这一步要明确，不管我们研究哪种方式，实际上都研究方式2，即LayoutInflater.from(context).inflate()。")]),t._v(" "),e("h4",{attrs:{id:"_2-按住ctrl-鼠标左键查看layoutinflater-from-context-inflate-resource-root-方法。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-按住ctrl-鼠标左键查看layoutinflater-from-context-inflate-resource-root-方法。"}},[t._v("#")]),t._v(" 2）按住Ctrl+鼠标左键查看LayoutInflater.from(context).inflate(resource, root)方法。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082336.png",alt:""}})]),t._v(" "),e("p",[t._v("嗯？LayoutInflater.from(context).inflate(resource, root)再调用了自己的重载inflate(resource, root, root != null)。")]),t._v(" "),e("h4",{attrs:{id:"_3-按住ctrl-鼠标左键查看layoutinflater-from-context-inflate-resource-root-inflate-resource-root-root-null-方法。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-按住ctrl-鼠标左键查看layoutinflater-from-context-inflate-resource-root-inflate-resource-root-root-null-方法。"}},[t._v("#")]),t._v(" 3）按住Ctrl+鼠标左键查看LayoutInflater.from(context).inflate(resource, root).inflate(resource, root, root != null)方法。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082347.png",alt:""}})]),t._v(" "),e("p",[t._v("嗯？？LayoutInflater.from(context).inflate(resource, root).inflate(resource, root, root != null)再再调用了自己的重载inflate(parser, root, attachToRoot)。")]),t._v(" "),e("h4",{attrs:{id:"_4-按住ctrl-鼠标左键查看layoutinflater-from-context-inflate-resource-root-inflate-resource-root-root-null-inflate-parser-root-attachtoroot-方法。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-按住ctrl-鼠标左键查看layoutinflater-from-context-inflate-resource-root-inflate-resource-root-root-null-inflate-parser-root-attachtoroot-方法。"}},[t._v("#")]),t._v(" 4）按住Ctrl+鼠标左键查看LayoutInflater.from(context).inflate(resource, root).inflate(resource, root, root != null).inflate(parser, root, attachToRoot)方法。")]),t._v(" "),e("p",[t._v("这下总算是到头了，不过代码太长，这里就截了一半的图（这不是重点）。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082358.png",alt:""}})]),t._v(" "),e("p",[t._v("好，重点来了，到这步我们可以明白一点，View.inflate()整个方法调用链如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("View.inflate() = \n\tLayoutInflater.from(context)\n\t\t.inflate(resource, root)\n\t\t.inflate(resource, root, root != null)\n\t\t.inflate(parser, root, attachToRoot)\n")])])]),e("h3",{attrs:{id:"_2、layoutinflater的inflate-parser-root-attachtoroot-做了什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、layoutinflater的inflate-parser-root-attachtoroot-做了什么"}},[t._v("#")]),t._v(" 2、LayoutInflater的inflate(parser, root, attachToRoot)做了什么？")]),t._v(" "),e("p",[t._v("由于代码太长，不方便截图，下面贴出代码中的重点代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n    synchronized (mConstructorArgs) {\n\n\t\t\t\t...\n\t\t\t\t省略代码~\n\t\t\t\t...\n\n                final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                ViewGroup.LayoutParams params = null;\n\n                if (root != null) {\n                    if (DEBUG) {\n                        System.out.println("Creating params from root: " +\n                                root);\n                    }\n                    // Create layout params that match root, if supplied\n                    params = root.generateLayoutParams(attrs);\n                    if (!attachToRoot) {\n                        // Set the layout params for temp if we are not\n                        // attaching. (If we are, we use addView, below)\n                        temp.setLayoutParams(params);\n                    }\n                }\n\n\t\t\t\t...\n\t\t\t\t省略代码~\n\t\t\t\t...\n\n                // We are supposed to attach all the views we found (int temp)\n                // to root. Do that now.\n                if (root != null && attachToRoot) {\n                    root.addView(temp, params);\n                }\n\n                // Decide whether to return the root that was passed in or the\n                // top view found in xml.\n                if (root == null || !attachToRoot) {\n                    result = temp;\n                }\n\n\t\t\t\t...\n\t\t\t\t省略代码~\n\t\t\t\t...\n\n        return result;\n    }\n}\n')])])]),e("p",[t._v("该inflate方法中有以下四步操作：")]),t._v(" "),e("ol",[e("li",[t._v("通过使用XmlPullParser parser将xml布局文件转换成视图temp。")]),t._v(" "),e("li",[t._v("判断ViewGroup root对象是否为null，来决定要不要给temp设置LayoutParams。")]),t._v(" "),e("li",[t._v("判断boolean attachToRoot是否为true，来决定是否要把temp顺便加到ViewGroup root中。")]),t._v(" "),e("li",[t._v("最后返回视图temp。")])]),t._v(" "),e("p",[t._v("到这里就把创建视图的流程分析完了，接下来是比较 View.inflate()和 LayoutInflater.from(context).inflate()的区别。")]),t._v(" "),e("h3",{attrs:{id:"_3、view-inflate-和-layoutinflater-from-context-inflate-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、view-inflate-和-layoutinflater-from-context-inflate-的区别"}},[t._v("#")]),t._v(" 3、View.inflate()和 LayoutInflater.from(context).inflate()的区别")]),t._v(" "),e("h4",{attrs:{id:"_1-view-inflate-第三个参数的解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-view-inflate-第三个参数的解析"}},[t._v("#")]),t._v(" 1）View.inflate()第三个参数的解析：")]),t._v(" "),e("p",[t._v("开发中常常会对第三个参数（ViewGroup root）传入null吧，通过上面对最终inflate方法的分析，可以知道，如果ViewGroup root取值为null，则得到的视图temp不会被设置LayoutParams。下面做个试验：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('View itemView = View.inflate(parent.getContext(), android.R.layout.simple_list_item_1, null);\nViewGroup.LayoutParams params = itemView.getLayoutParams();\nLog.e("CSDN_LQR", "params == null : " + (params == null));\n')])])]),e("p",[t._v("打印结果如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082413.png",alt:""}})]),t._v(" "),e("p",[t._v("同理，将第三个参数传入一个确实存在的ViewGroup时，结果就是视图temp能获取到LayoutParams，有兴趣的可以自己试试。")]),t._v(" "),e("h4",{attrs:{id:"_2-layoutinflater-from-context-inflate-的优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-layoutinflater-from-context-inflate-的优势"}},[t._v("#")]),t._v(" 2）LayoutInflater.from(context).inflate()的优势：")]),t._v(" "),e("p",[t._v("*"),e("em",[t._v("下面的场景分析将体现出LayoutInflater.from(context).inflate()的灵活性。")])]),t._v(" "),e("p",[t._v("如果是在RecyclerView或ListView中使用View.inflate()创建布局视图，又想对创建出来的布局视图进行高度等参数设置时，会有什么瓶颈呢？")]),t._v(" "),e("p",[t._v("下面贴出我之前写过的一段用于瀑布流适配器的代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public class MyStaggeredAdapter extends RecyclerView.Adapter<MyStaggeredAdapter.MyViewHolder> {\n\n    private List<String> mData;\n    private Random mRandom = new Random();\n\n    public MyStaggeredAdapter(List<String> data) {\n        mData = data;\n    }\n\n    @Override\n    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n\t\t//这里使用的是安卓自带的文本控件布局\n        View itemView = View.inflate(parent.getContext(), android.R.layout.simple_list_item_1, null);\n        return new MyViewHolder(itemView);\n    }\n\n    @Override\n    public void onBindViewHolder(MyViewHolder holder, int position) {\n\t\t//为实现瀑布流效果，需要对条目高度进行设置（让各个条目的高度不同）\n        ViewGroup.LayoutParams params = holder.mTv.getLayoutParams();\n    \tparams.height = mRandom.nextInt(200) + 200;\n        holder.mTv.setLayoutParams(params);\n        holder.mTv.setBackgroundColor(Color.argb(255, 180 + mRandom.nextInt(60) + 30, 180 + mRandom.nextInt(60) + 30, 180 + mRandom.nextInt(60) + 30));\n        holder.mTv.setText(mData.get(position));\n    }\n\n    @Override\n    public int getItemCount() {\n        return mData.size();\n    }\n\n    class MyViewHolder extends RecyclerView.ViewHolder {\n\n        TextView mTv;\n\n        public MyViewHolder(View itemView) {\n            super(itemView);\n            mTv = (TextView) itemView.findViewById(android.R.id.text1);\n        }\n    }\n\n}\n")])])]),e("p",[t._v("经过上面对View.inflate()的第三个参数解析之后，这代码的问题一眼就能看出来了吧，没错，就是ViewGroup.LayoutParams params = holder.mTv.getLayoutParams();这行代码获取到的LayoutParams为空，不信？走一个。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082428.png",alt:""}})]),t._v(" "),e("p",[t._v("接下来理所当然的要让得到的LayoutParams不为空啦，所以将onCreateViewHolder()的代码修改如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("@Override\npublic MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n\t//这里使用的是安卓自带的文本控件布局\n    View itemView = View.inflate(parent.getContext(), android.R.layout.simple_list_item_1, parent);\n    return new MyViewHolder(itemView);\n}\n")])])]),e("p",[t._v("传入的ViewGroup parent不为null，所以肯定获取的LayoutParams不为空，但是又有一个问题，看报错。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082444.png",alt:""}})]),t._v(" "),e("p",[t._v("为什么会报这样的错呢？回看最终inflate()的四个步骤：")]),t._v(" "),e("ol",[e("li",[t._v("通过使用XmlPullParser parser将xml布局文件转换成视图temp。")]),t._v(" "),e("li",[t._v("判断ViewGroup root对象是否为null，来决定要不要给temp设置LayoutParams。")]),t._v(" "),e("li",[t._v("判断boolean attachToRoot是否为true，来决定是否要把temp顺便加到ViewGroup root中。")]),t._v(" "),e("li",[t._v("最后返回视图temp。")])]),t._v(" "),e("p",[t._v("步骤2让条目获取的LayoutParams不为空没错，但是步骤3出问题了，当使用View.inflate(parent.getContext(), android.R.layout.simple_list_item_1, parent)传入parent后，boolean attachToRoot的取值就是为true，所以创建出来的条目会顺便添加到ViewGroup中（这里的ViewGroup就是RecyclerView），而RecyclerView本身就会自动将条目添加到自身，这样就添加了两次，故报错。那为什么attachToRoot的取值是true呢？再看View.inflate()的整个方法调用链：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("View.inflate() = \n\tLayoutInflater.from(context)\n\t\t.inflate(resource, root)\n\t\t.inflate(resource, root, root != null)\n\t\t.inflate(parser, root, attachToRoot)\n")])])]),e("p",[t._v("boolean attachToRoot的取值取决于root（也就是parent）是否为空，这就是View.inflate()的瓶颈，它没法灵活的指定boolean attachToRoot的取值。这里我就是只是想让创建出来的视图能得到LayoutParams，但不添加到ViewGroup中，这样的要求可以通过LayoutInflater.from(context).inflate()来实现。所以下面将onCreateViewHolder()的代码修改如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Override\npublic MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n    View itemView = LayoutInflater.from(parent.getContext()).inflate(android.R.layout.simple_list_item_1,parent,false);\n    ViewGroup.LayoutParams params = itemView.getLayoutParams();\n    Log.e("CSDN_LQR", "params == null : " + (params == null));\n    return new MyViewHolder(itemView);\n}\n')])])]),e("p",[t._v("代码中LayoutInflater.from(parent.getContext()).inflate(android.R.layout.simple_list_item_1,parent,false)传入了parent（即ViewGroup不为null），所以创建出来的视图可以得到LayoutParams，同时又指定attachToRoot的取值为false，即不添加到ViewGroup中。到这里，上面重覆添加子控件的问题就解决了，总结一下吧：")]),t._v(" "),e("ul",[e("li",[t._v("View.inflate()第三个参数若不为null，则创建出来的视图一定能获得LayoutParams，反之，不一定。（下面会解释）")]),t._v(" "),e("li",[t._v("LayoutInflater.from(context).inflate()可以灵活的指定传入的ViewGroup是否为空来决定创建出来的视图能否获得LayoutParams，同时又可以指定attachToRoot的取值来决定创建出来的视图是否要添加到ViewGroup中。")])]),t._v(" "),e("h2",{attrs:{id:"三、小细节"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、小细节"}},[t._v("#")]),t._v(" 三、小细节")]),t._v(" "),e("p",[t._v("*"),e("em",[t._v("上面已经将LayoutInflater的源码分析完毕，现在还有一个小问题，其实跟本文主题没多大关系，当作拓展来看吧。")])]),t._v(" "),e("p",[t._v("前面说到，View.inflate()第三个参数若不为null，则创建出来的视图一定能获得LayoutParams，反之，不一定。这话怎么理解？")]),t._v(" "),e("p",[t._v("也就是说，即使View.inflate()第三个参数为null，创建出来的视图也有可能获得LayoutParams咯？是的，说到底，这个LayoutParams的有无，实际取决于条目本身是否有父控件，且看上面用到的simple_list_item_1布局：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082457.png",alt:""}})]),t._v(" "),e("p",[t._v("发现了吧，就一个TextView，没有父控件，那如果我给它加个父控件，同时使用最开始的方式也能顺利得到LayoutParams呢？代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Override\npublic MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n\tView itemView = View.inflate(parent.getContext(), R.layout.item_layout, null);\n    return new MyViewHolder(itemView);\n}\n\n@Override\npublic void onBindViewHolder(MyViewHolder holder, int position) {\n    ViewGroup.LayoutParams params = holder.mTv.getLayoutParams();\n    Log.e("CSDN_LQR", "params == null : " + (params == null));\n    ...\n\t控件设置\n\t...\n}\n')])])]),e("p",[t._v("item_layout的布局代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('<?xml version="1.0" encoding="utf-8"?>\n<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n              android:layout_width="match_parent"\n              android:layout_height="match_parent"\n              android:orientation="vertical">\n\n    <TextView\n        android:id="@android:id/text1"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:gravity="center_vertical"\n        android:minHeight="?android:attr/listPreferredItemHeightSmall"\n        android:textAppearance="?android:attr/textAppearanceListItemSmall"/>\n</LinearLayout>\n')])])]),e("p",[t._v("运行，果然可以获得LayoutParams，打印结果如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210107082509.png",alt:""}})]),t._v(" "),e("h2",{attrs:{id:"四、最后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、最后"}},[t._v("#")]),t._v(" 四、最后")]),t._v(" "),e("p",[t._v("本人也是头次写类分析型的文章，如描述有误，请不吝赐教，同时还请各位看客多担待，指出后本人会尽快修改，谢谢。")])])}),[],!1,null,null,null);e.default=o.exports}}]);
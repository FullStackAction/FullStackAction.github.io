(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{458:function(t,a,s){"use strict";s.r(a);var e=s(21),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、编译流程详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、编译流程详解"}},[t._v("#")]),t._v(" 一、编译流程详解")]),t._v(" "),a("p",[t._v("编译流程")]),t._v(" "),a("ul",[a("li",[t._v("编译：将高级语言编写的程序转换为二进制代码可执行性目标程序的过程")]),t._v(" "),a("li",[t._v("四大过程：预处理、编译、汇编、链接")])]),t._v(" "),a("h3",{attrs:{id:"_1、预处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、预处理"}},[t._v("#")]),t._v(" 1、预处理")]),t._v(" "),a("p",[t._v("完成宏替换、文件引入，以及去除空行、注释等，为下一步的编译做准备；也就是对各种预处理命令进行处理，包括头文件的包含、宏定义的扩展、条件编译的选择等。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test.c文件内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world!\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对test.c文件进行预处理：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-E")]),t._v(" test.c "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" test.i\n")])])]),a("ul",[a("li",[t._v("选项-E：让gcc在预处理结束后停止编译，test.i文件为预处理后输出的文件。")]),t._v(" "),a("li",[t._v("选项-o：指定输出文件。")])]),t._v(" "),a("blockquote",[a("p",[t._v("此时，test.i 就是 test.c 预编译后的产物，体积会增大，此时test.i还是一个文本文件，可以用文本编译器打开查看。")])]),t._v(" "),a("h3",{attrs:{id:"_2、编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、编译"}},[t._v("#")]),t._v(" 2、编译")]),t._v(" "),a("ul",[a("li",[t._v("将预处理后的代码编译成汇编代码。在这个阶段中，首先要检查代码的规范性、是否有语法错误等，以确定代码实际要做的工作，在检查无误后，再把代码翻译成汇编语言。")]),t._v(" "),a("li",[t._v("编译程序执行时，先分析，后综合。分析，就是指词法分析、语法分析、语义分析和中间代码生成。综合，就是指代码优化和代码生成。")]),t._v(" "),a("li",[t._v("大多数的编译程序直接产生机器语言的目标代码，形成可执行的目标文件，也有的是先产生汇编语言一级的符号代码文件，再调用汇编程序进行翻译和加工处理，最后产生可执行的机器语言目标文件。")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ftrylockfile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FILE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("__stream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__nothrow__ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __leaf__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("funlockfile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FILE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("__stream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__nothrow__ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __leaf__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("868")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/include/stdio.h"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.c"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.c"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面是预处理后test.i文件的部分内容，下面对test.i文件进行编译：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-S")]),t._v(" test.i "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" test.s\n")])])]),a("ul",[a("li",[t._v('选项-S：让gcc在编译结束后停止编译过程，"test.s"文件为编译后生成的汇编代码。')])]),t._v(" "),a("blockquote",[a("p",[t._v("此时，test.s 就是 test.i 文件汇编后的产物，同样也可以用文本编译器打开查看。")])]),t._v(" "),a("h3",{attrs:{id:"_3、汇编"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、汇编"}},[t._v("#")]),t._v(" 3、汇编")]),t._v(" "),a("p",[t._v('汇编就是把编译阶段生成的".s"文件转成二进制目标代码，也就是机器代码（01序列）。')]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("file\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.c"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("section\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rodata\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LC0"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("string\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("globl\tmain\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type\tmain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" @function\nmain"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LFB0"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cfi_startproc\n\tpushq\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rbp\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cfi_def_cfa_offset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cfi_offset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\n\tmovq\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rsp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rbp\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cfi_def_cfa_register "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n\tleaq\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LC0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rdi\n\tcall\tputs@PLT\n\tmovl\t$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("eax\n\tpopq\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("rbp\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cfi_def_cfa "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n\tret\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cfi_endproc\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LFE0"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size\tmain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("main\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ident\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GCC: (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("section\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("note"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GNU"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("@progbits\n")])])]),a("p",[t._v("上面是编译后生成的test.s文件里的汇编代码，下面对test.s文件进行汇编：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" test.s "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" test.o\n")])])]),a("ul",[a("li",[t._v('选项-c：让gcc在汇编结束后停止编译过程，"test.o"文件为汇编后生成的机器码目标文件。')])]),t._v(" "),a("h3",{attrs:{id:"_4、链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、链接"}},[t._v("#")]),t._v(" 4、链接")]),t._v(" "),a("p",[t._v("链接就是将多个目标文件以及所需的库文件链接生成可执行目标文件的过程。")]),t._v(" "),a("p",[t._v("下面对test.o进行链接：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ gcc test.o "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n$ ./test\nhello world"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),a("ul",[a("li",[t._v("选项-o：本质上是一个重命名选项。不使用-o选项时，默认生成的是a.out文件。这里生成的是可执行文件test。")]),t._v(" "),a("li",[t._v("./test执行后输出hello world!")])]),t._v(" "),a("h3",{attrs:{id:"_5、简化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、简化"}},[t._v("#")]),t._v(" 5、简化")]),t._v(" "),a("p",[t._v("一般情况下，我们会使用gcc命令，一步生成可执行文件，简化编译流程：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" test.c\n$ ./test\nhello world"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),a("h2",{attrs:{id:"二、-静态库与动态库原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、-静态库与动态库原理"}},[t._v("#")]),t._v(" 二、 静态库与动态库原理")]),t._v(" "),a("h3",{attrs:{id:"_1、-静态库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、-静态库"}},[t._v("#")]),t._v(" 1、 静态库")]),t._v(" "),a("h4",{attrs:{id:"_1-什么是静态库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是静态库"}},[t._v("#")]),t._v(" 1) 什么是静态库")]),t._v(" "),a("ul",[a("li",[t._v("静态库实际就是一些目标文件（一般以.o结尾）的集合，静态库一般以.a结尾，只用于生成可执行文件阶段。")]),t._v(" "),a("li",[t._v("在链接步骤中，链接器将从库文件取得所需代码，复制到生成的可执行文件中。这种库称为静态库。其特点是可执行文件中包含了库代码的一份完整拷贝，在编译过程中被载入程序中。缺点就是多次使用就会有多份冗余拷贝，并且对程序的更新、部署和发布会带来麻烦，如果静态库有更新，那么所有使用它的程序都需要重新编译、发布。")])]),t._v(" "),a("h4",{attrs:{id:"_2-生成静态库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-生成静态库"}},[t._v("#")]),t._v(" 2) 生成静态库")]),t._v(" "),a("ul",[a("li",[t._v("首先生成test.o目标文件。")]),t._v(" "),a("li",[t._v("使用ar命令将test.o打包成libtest.a静态库。")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成目标文件")]),t._v("\n$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" test.c "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" test.o\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用ar命令将目标文件打包成静态库")]),t._v("\n$ ar  libtest.a test.o\nar: creating libtest.a\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用ar t libtest.a 查看静态库内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$ar")]),t._v(" t libtest.a\ntest.o\n")])])]),a("p",[t._v("选项rcs各自的含义：")]),t._v(" "),a("ul",[a("li",[t._v("选项r：更新或增加新文件到静态库中。")]),t._v(" "),a("li",[t._v("选项c：创建一个库，不管存在与否，都创建。")]),t._v(" "),a("li",[t._v("选项s：创建文档索引，在创建较大的库时，能够加快编译速度。")])]),t._v(" "),a("h3",{attrs:{id:"_2、-动态库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、-动态库"}},[t._v("#")]),t._v(" 2、 动态库")]),t._v(" "),a("h4",{attrs:{id:"_1-什么是动态库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是动态库"}},[t._v("#")]),t._v(" 1）什么是动态库")]),t._v(" "),a("ul",[a("li",[t._v("动态库在链接阶段没有被复制到程序中，而是在程序运行时由系统动态加载到内存中供程序调用。")]),t._v(" "),a("li",[t._v("系统只需载入一次动态库，不同的程序可以得到内存中相同动态库的副本，因此节省了很多内存。")])]),t._v(" "),a("h4",{attrs:{id:"_2-生成动态库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-生成动态库"}},[t._v("#")]),t._v(" 2）生成动态库")]),t._v(" "),a("ul",[a("li",[t._v("首先生成test.o目标文件。")]),t._v(" "),a("li",[t._v("使用-shared和-fPIC参数生成动态库。")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 首先生成目标文件")]),t._v("\n$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" test.c "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" test.o\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用-fPIC和-shared生成动态库")]),t._v("\n$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-shared")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-fPIC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" libtest.so test.o\n")])])]),a("blockquote",[a("p",[t._v("fPIC：全称是 Position Independent Code， 用于生成位置无关代码。")])]),t._v(" "),a("h3",{attrs:{id:"_3、案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、案例"}},[t._v("#")]),t._v(" 3、案例")]),t._v(" "),a("p",[t._v("编写一个工具方法（tool.h + tool.c文件），查找出数组的最大值：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tool.h 文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find_max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tool.c 文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tool.h"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find_max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tmax "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在main.c文件中，调用tool.h的find_max函数：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.c 文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tool.h"')])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find_max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"max = %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_1-编译-使用静态库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-编译-使用静态库"}},[t._v("#")]),t._v(" 1）编译&使用静态库")]),t._v(" "),a("p",[t._v("编译tool静态库：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 编译tool.c。可以省略"-o tool.o"，默认gcc会生成一个与tool.c同名的.o文件。')]),t._v("\n$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" tool.c\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编译生成libtool.a静态库")]),t._v("\n$ ar rcs libtool.a tool.o\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编译main可执行文件。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -l用来指定要链接的库，后面接库的名字；-L表示编译程序根据指定路径寻找库文件。")]),t._v("\n$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" main main.c -L. "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-ltool")]),t._v("\n\n$ ./main\nmax "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n")])])]),a("p",[t._v("可以用ldd命令查看main文件依赖了哪些库：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ ldd main\n")])])]),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210105221657.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_2-编译-使用动态库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-编译-使用动态库"}},[t._v("#")]),t._v(" 2）编译&使用动态库")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编译tool.c，生成tool.o")]),t._v("\n$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" tool.c\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编译生成libtool.so动态库")]),t._v("\n$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-shared")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-fPIC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" libtool.so tool.o\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编译main可执行文件")]),t._v("\n$ gcc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" main main.c -L. "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-ltool")]),t._v("\n\n$ ./main\n./main: error "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" loading shared libraries: libtool.so: cannot "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),t._v(" shared object file: No such "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" or directory\n")])])]),a("blockquote",[a("p",[t._v("注意，当静态库与动态库同名时，gcc会优先加载动态库。即，此时目录下即有libtool.a，又有libtool.so，编译main时指定了-ltool，gcc会链接libtool.so！")])]),t._v(" "),a("p",[t._v("可以用ldd命令查看main文件依赖了哪些库：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ ldd main\n")])])]),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210105221701.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看到，libtool.so找不到，这是因为在系统的默认动态链接库路径下没有这个libtool.so文件，可以在执行之前，给main设置环境变量解决：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将当前目录设置到环境变量中")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("LD_LIBRARY_PATH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(". ./main\nmax "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n")])])]),a("blockquote",[a("p",[a("code",[t._v("LD_LIBRARY_PATH")]),t._v(" 指定查找共享库，即动态链接库时，除默认路径以外，其他的路径。")])]),t._v(" "),a("h3",{attrs:{id:"_4、区别总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、区别总结"}},[t._v("#")]),t._v(" 4、区别总结")]),t._v(" "),a("p",[t._v("载入时刻不同：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("静态库")]),t._v("：在程序编译时会链接到目标代码中，程序运行时不再需要静态库，因此体积较大。而且每次编译都需要载入静态代码，因此内存开销大。")]),t._v(" "),a("li",[a("code",[t._v("动态库")]),t._v("：在程序编译时不会被链接到目标代码中，而是在程序运行时才被载入，程序运行时需要动态库存在，因此体积较小。而且系统只需载入一次动态库，不同程序可以得到内存中相同的动态库副本，因此内存开销小。")])]),t._v(" "),a("h2",{attrs:{id:"三、makefile走读与语法基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、makefile走读与语法基础"}},[t._v("#")]),t._v(" 三、makefile走读与语法基础")]),t._v(" "),a("h3",{attrs:{id:"_1、makefile是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、makefile是什么"}},[t._v("#")]),t._v(" 1、makefile是什么")]),t._v(" "),a("p",[t._v("在一个工程中，源文件很多，按类型、功能、模块分别被存放在若干个目录中，需要按一定的顺序、规则进行编译，这时就需要使用到makefile。")]),t._v(" "),a("ul",[a("li",[t._v("makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要重新编译，如何进行链接等操作。")]),t._v(" "),a("li",[t._v("makefile就是“自动化编译”，告诉make命令如何编译和链接。")])]),t._v(" "),a("p",[t._v("makefile是make工具的配置脚本，默认情况下，make命令会在当前目录下去寻找该文件（按顺序找寻文件名为"),a("code",[t._v("“GNUmakefile”")]),t._v("、"),a("code",[t._v("“makefile”")]),t._v("、"),a("code",[t._v("“Makefile”")]),t._v("的文件）。")]),t._v(" "),a("blockquote",[a("p",[t._v("在这三个文件名中，最好使用“Makefile”这个文件名，因为，这个文件名第一个字符为大写，这样有一种显目的感觉。\n最好不要用“GNUmakefile”，这个文件是GNU的make识别的。有另外一些make只对全小写的“makefile”文件名敏感。\n但是基本上来说，大多数的make都支持“makefile”和“Makefile”这两种默认文件名。")])]),t._v(" "),a("p",[t._v("当然，配置文件的文件名也可以不是makefile，比如：config.debug，这时需要通过 "),a("code",[t._v("-f")]),t._v(" 或 "),a("code",[t._v("--file")]),t._v(" 指定配置文件，即：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用-f")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" config.debug\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用--file")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--file")]),t._v(" config.debug\n")])])]),a("h3",{attrs:{id:"_2、makefile里有什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、makefile里有什么"}},[t._v("#")]),t._v(" 2、makefile里有什么")]),t._v(" "),a("p",[t._v("makefile包含以下五个：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("显示规则")]),t._v("：说明了如何生成一个或多个目标文件。")]),t._v(" "),a("li",[a("code",[t._v("隐晦规则")]),t._v("：make有自动推导功能，可以用隐晦规则来简写makefile。")]),t._v(" "),a("li",[a("code",[t._v("变量定义")]),t._v("：在makefile中可以变量一系列的变量，变量一般是字符串，类似c语言中的宏，当makefile被执行时，其中的变量都会被扩展相应的位置上。")]),t._v(" "),a("li",[a("code",[t._v("文件指示")]),t._v("：包括3个部分：①在makefile引用另一个makefile，类似C语言中的include；②根据条件指定makefile中的有效部分，类似C语言中的预编译#if一样；③定义多行的命令。")]),t._v(" "),a("li",[a("code",[t._v("注释")]),t._v("：只有行注释，使用#字符表示。")])]),t._v(" "),a("h3",{attrs:{id:"_3、makefile的规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、makefile的规则"}},[t._v("#")]),t._v(" 3、makefile的规则")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("target ...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" prerequisites ...\n\tcommand\n或者：\n"),a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("target ...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" prerequisites ... "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" command\n")])])]),a("blockquote",[a("p",[t._v("若prerequisites与command在同一行，需要用"),a("code",[t._v(";")]),t._v("分隔。\n若prerequisites与command不在同一行，则command前面需要用tab键开头。\n另外，如果命令太长，可以用"),a("code",[t._v("\\")]),t._v("作为换行符。")])]),t._v(" "),a("ul",[a("li",[t._v("target：目标文件。可以是ObjectFile，也可以是执行文件，还可以是标签（Label）；如果有多个文件，可以用空格隔开；可以使用通配符。")]),t._v(" "),a("li",[t._v("prerequisites：依赖文件，既要生成那个target所需要的文件或其他target。")]),t._v(" "),a("li",[t._v("command：make需要执行的命令。")])]),t._v(" "),a("h4",{attrs:{id:"makefile的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#makefile的作用"}},[t._v("#")]),t._v(" makefile的作用：")]),t._v(" "),a("p",[t._v("告诉make，文件的依赖关系，以及如何生成目标文件。prerequisites中，如果有一个及以上的文件比target要新的话，target就会被认为是过时的，需要重新生成，command就会被执行，从而生成新的target。")]),t._v(" "),a("h3",{attrs:{id:"_4、makefile示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、makefile示例"}},[t._v("#")]),t._v(" 4、makefile示例")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前目录存在main.c、tool.c、tool.h三个文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下面是makefile文件内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" main.o tool.o\n\tgcc main.o tool.o -o main\n"),a("span",{pre:!0,attrs:{class:"token builtin-target builtin"}},[t._v(".PHONY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" clean\n"),a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("clean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t-rm main *.o\n-----------------------------\n// 执行 make 后输出如下：\ncc\t-c -o main.o main.c\ncc\t-c -o tool.o tool.c\ngcc main.o tool.o -o main\n// 并且生成了一个可执行文件main\n")])])]),a("ul",[a("li",[a("code",[t._v("-o")]),t._v("：指定可执行文件的名称。")]),t._v(" "),a("li",[a("code",[t._v("clean")]),t._v("：标签，不会生成“clean”文件，这样的target称之为“伪目标”，伪目标的名字不能和文件名重复。clean一般放在文件最后。")]),t._v(" "),a("li",[a("code",[t._v(".PHONY")]),t._v("：显示地指明clean是一个“伪目标”。")])]),t._v(" "),a("blockquote",[a("p",[t._v("make会自动推导main.o、tool.o如何生成。\n伪目标的名字不能和文件名重复，即当前目录下，不能有clean文件。\n可以通过 "),a("code",[t._v("make clean")]),t._v(" 执行删除命令。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210105221709.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_5、makefile如何工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、makefile如何工作"}},[t._v("#")]),t._v(" 5、makefile如何工作")]),t._v(" "),a("p",[t._v("默认方式下，输入make命令后：")]),t._v(" "),a("ul",[a("li",[t._v("make会在当前目录下找名字叫“Makefile”或“makefile”的文件。")]),t._v(" "),a("li",[t._v("如果找到，它会找文件中第一个目标文件（target），并把这个target作为最终的目标文件，如前面示例中的“main”。")]),t._v(" "),a("li",[t._v("如果main文件不存在，或main所依赖的.o文件的修改时间要比main文件要新，那么它会执行后面所定义的命令来生成main文件。")]),t._v(" "),a("li",[t._v("如果main所依赖的.o文件也存在，那么main会在当前文件中找目标为.o文件的依赖性，若找到则根据规则生成.o文件。")]),t._v(" "),a("li",[t._v("make再用.o文件声明make的终极任务，也就是执行文件“main”。")])]),t._v(" "),a("h3",{attrs:{id:"_6、makefile中使用变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、makefile中使用变量"}},[t._v("#")]),t._v(" 6、makefile中使用变量")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[t._v("objects "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" main.o tool.o\n"),a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tgcc "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -o main\n"),a("span",{pre:!0,attrs:{class:"token builtin-target builtin"}},[t._v(".PHONY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" clean\n"),a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("clean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t-rm main "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n-----------------------------\n// 执行 make 后输出如下：\ncc\t-c -o main.o main.c\ncc\t-c -o tool.o tool.c\ngcc main.o tool.o -o main\n")])])]),a("ul",[a("li",[t._v("为了makefile的易维护，在makefile中我们可以使用变量。makefile的变量也就是一个字符串，理解成C语言中的宏可能会更好。")]),t._v(" "),a("li",[t._v("比如：我们声明一个变量，叫"),a("code",[t._v("objects")]),t._v("，于是，我们就可以很方便地在我们的makefile中以“"),a("code",[t._v("$(objects)")]),t._v("”的方式来使用这个变量了。")])]),t._v(" "),a("h3",{attrs:{id:"_7、makefile中引用其他的makefile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、makefile中引用其他的makefile"}},[t._v("#")]),t._v(" 7、makefile中引用其他的makefile")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 语法格式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" <filename>\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 举个例子，你有这样几个 Makefile：a.mk、b.mk、c.mk，还有一个文件叫 # foo.make，以及一个变量$(bar)，其包含了 e.mk 和 f.mk")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" foo.make *.mk "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等价于：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" foo.make a.mk b.mk c.mk e.mk f.mk\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果文件找不到，而你希望make时不理会那些无法读取的文件而继续执行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 可以在include前加一个减号“-”，如：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("-include")]),t._v(" <filename>\n")])])]),a("p",[t._v("使用include关键字可以把其它Makefile包含进来，include语法格式：\n"),a("code",[t._v("include <filename>")])]),t._v(" "),a("h3",{attrs:{id:"_8、环境变量makefiles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、环境变量makefiles"}},[t._v("#")]),t._v(" 8、环境变量MAKEFILES")]),t._v(" "),a("p",[t._v("MAKEFILES")]),t._v(" "),a("blockquote",[a("p",[t._v("如果当前环境中字义了环境变量 MAKEFILES，那么，make会把这个变量中的值做一个类似于 include 的动作。这个变量中的值是其它的 Makefile，用空格分隔。只是，它和include不同的是，从这个环境中引入的Makefile的“目标”不会起作用，如果环境变量中定义的文件发现错误，make也会不理。但是建议不要使用这个环境变量，因为只要这个变量一被定义，那么当你使用make时，所有的Makefile都会受到它的影响。\n也许有时候Makefile出现了奇怪的事，那么可以查看当前环境中有没有定义这个变量。")])]),t._v(" "),a("h3",{attrs:{id:"_9、makefile预定义变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、makefile预定义变量"}},[t._v("#")]),t._v(" 9、Makefile预定义变量")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("变量名")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CC")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("C语言编译器的名称")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("cc")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CPP")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("C语言预处理器的名称")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$(CC) -E")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CXX")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("C++语言编译器的名称")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("g++")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("RM")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("删除文件程序的名称")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("rm -f")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CFLAGS")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("C语言编译器的编译选项")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CPPFLAGS")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("C语言预处理器的编译选项")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CXXFLAGS")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("C++语言编译器的编译选项")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无")])])])]),t._v(" "),a("h3",{attrs:{id:"_10、makefile自动变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、makefile自动变量"}},[t._v("#")]),t._v(" 10、Makefile自动变量")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("自动变量")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$*")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("目标文件的名称，不包含扩展名")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$@")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("目标文件的名称，包含扩展名")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$+")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("所有的依赖文件，以空格隔开，可能含有重复的文件")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$^")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("所有的依赖文件，以空格隔开，不重复")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$<")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("依赖项中第一个依赖文件的名称")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$?")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("依赖项中所有比目标文件新的依赖文件")])])])]),t._v(" "),a("h3",{attrs:{id:"_11、makefile函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11、makefile函数"}},[t._v("#")]),t._v(" 11、Makefile函数")]),t._v(" "),a("p",[t._v("define本质是定义一个多行的变量，没办法直接调用，但可以在call的作用下，当作函数来使用。")]),t._v(" "),a("h4",{attrs:{id:"_1-不带参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-不带参数"}},[t._v("#")]),t._v(" 1）不带参数")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("define")]),t._v(" FUNC\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),t._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("endef")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" FUNC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n--------------------\n输出：hello\n")])])]),a("h4",{attrs:{id:"_2-带参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-带参数"}},[t._v("#")]),t._v(" 2）带参数")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("define")]),t._v(" FUNC1\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),t._v(" echo "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("endef")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" FUNC1,hello,world"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n--------------------\n输出：hello world\n")])])]),a("h3",{attrs:{id:"_12、make的工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12、make的工作流程"}},[t._v("#")]),t._v(" 12、make的工作流程")]),t._v(" "),a("p",[t._v("GNU的make工作时的执行步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("读入所有的Makefile。")]),t._v(" "),a("li",[t._v("读入被include的其它Makefile。")]),t._v(" "),a("li",[t._v("初始化文件中的变量。")]),t._v(" "),a("li",[t._v("推导隐晦规则，并分析所有规则。")]),t._v(" "),a("li",[t._v("为所有的目标文件创建依赖关系链。")]),t._v(" "),a("li",[t._v("根据依赖关系，决定哪些目标要重新生成。")]),t._v(" "),a("li",[t._v("执行生成命令。")])]),t._v(" "),a("p",[t._v("1~5是第一阶段，6~7为第二阶段。在第一阶段中，如果定义的变量被使用了，那么make会把变量展开在使用的位置，但是make并不是完全的马上展开，如果变量出现在依赖关系的规则中，那么只有当这条依赖被决定要使用的时候，变量才会被展开。")]),t._v(" "),a("h2",{attrs:{id:"三、android-mk基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、android-mk基础"}},[t._v("#")]),t._v(" 三、Android.mk基础")]),t._v(" "),a("h3",{attrs:{id:"_1、android-mk简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、android-mk简介"}},[t._v("#")]),t._v(" 1、Android.mk简介")]),t._v(" "),a("p",[t._v("Android.mk是一个向Android NDK构建系统描述NDK项目的GNU makefile片段。主要用来编译生成以下几种：")]),t._v(" "),a("ul",[a("li",[t._v("APK程序：一般的Android应用程序，系统级别的直接push即可。")]),t._v(" "),a("li",[t._v("JAVA库：Java类库，编译打包生成JAR文件。")]),t._v(" "),a("li",[t._v("C\\C++应用程序：可执行的C\\C++应用程序。")]),t._v(" "),a("li",[t._v("C\\C++静态库：编译生成C\\C++静态库，并打包成.a文件。")]),t._v(" "),a("li",[t._v("C\\C++共享库：编译生成共享库，并打包成.so文件。")])]),t._v(" "),a("h3",{attrs:{id:"_2、android-mk基本格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、android-mk基本格式"}},[t._v("#")]),t._v(" 2、Android.mk基本格式")]),t._v(" "),a("p",[t._v("这是一个简单的Android.mk文件的内容：")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义模块当前路径（必须定义在文件开头，只需定义一次）")]),t._v("\nLOCAL_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" my-dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清空当前环境变量（LOCAL_PATH除外）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前模块名（这里会生成libhello-jni.so）")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" hello-jni\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前模块包含的源代码文件")]),t._v("\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" hello-jni.c\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示当前模块将被编译成一个共享库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_SHARED_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("my-dir：是由编译系统提供的宏函数，返回当前.mk文件的路径。")]),t._v(" "),a("li",[t._v("CLEAR_VARS：是由编译系统提供的变量，指向一个特定的GNU makefile片段，可以清除除了LOCAL_PATH以外的以"),a("code",[t._v("LOCAL_")]),t._v("开头的变量，如："),a("code",[t._v("LOCAL_MODULE")]),t._v("、"),a("code",[t._v("LOCAL_SRC_FILES")]),t._v("。这样做是因为编译系统在单次执行中，会解析多个构建文件和模块定义，而以"),a("code",[t._v("LOCAL_")]),t._v("开头的变量是全局变量，所以描述每个模块之前，都会声明"),a("code",[t._v("CLEAR_VARS")]),t._v("变量，可以避免冲突。")]),t._v(" "),a("li",[t._v('LOCAL_MODULE：定义当前模块名，模块名必须唯一，而且不能包含空格。模块名为"hello-jni"时，会生成libhello-jni.so，如果模块名为"libhello-jni"时，则生成的还是libhello-jni.so！')]),t._v(" "),a("li",[t._v("LOCAL_SRC_FILES：当前模块包含的源文件，当源文件有多个时，用空格隔开。")])]),t._v(" "),a("h3",{attrs:{id:"_3、编译多个共享库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、编译多个共享库"}},[t._v("#")]),t._v(" 3、编译多个共享库")]),t._v(" "),a("p",[t._v("一个Android.mk可能编译产生多个共享库模块。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[t._v("LOCAL_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" my-dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 模块1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module1\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module1.c\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_SHARED_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 模块2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module2\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module2.c\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_SHARED_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这里会产生libmodule1.so和libmodule2.so两个动态库。")]),t._v(" "),a("h3",{attrs:{id:"_4、编译静态库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、编译静态库"}},[t._v("#")]),t._v(" 4、编译静态库")]),t._v(" "),a("p",[t._v("虽然Android应用程序不能直接使用静态库，但静态库可以用来编译动态库。比如在将第三方代码添加到原生项目中时，可以不用直接将第三方源码包括在原生项目中，而是将第三方源码编译成静态库，然后并入共享库。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[t._v("LOCAL_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" my-dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第三方AVI库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib.c platform_posix.c\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_STATIC_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 原生模块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module.c\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将静态库模块名添加到LOCAL_STATIC_LIBRARIES变量")]),t._v("\nLOCAL_STATIC_LIBRARIES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_SHARED_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"_5、使用共享库共享通用模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、使用共享库共享通用模块"}},[t._v("#")]),t._v(" 5、使用共享库共享通用模块")]),t._v(" "),a("p",[t._v("静态库可以保证源代码模块化，但是当静态库与共享库相连时，它就变成了共享库的一部分。在多个共享库的情况下，多个共享库与静态库连接时，需要将通用模块的多个副本与不同的共享库重复相连，这样就增加了APP的大小。这种情况，可以将通用模块作为共享库。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[t._v("LOCAL_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" my-dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第三方AVI库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib.c platform_posix.c\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_SHARED_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 原生模块1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module1\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module1.c\nLOCAL_SHARED_LIBRARIES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_SHARED_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 原生模块2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module2\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module2.c\nLOCAL_SHARED_LIBRARIES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_SHARED_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("以上的做法必须基于同一个NDK项目。")])]),t._v(" "),a("h3",{attrs:{id:"_6、在多个ndk项目间共享模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、在多个ndk项目间共享模块"}},[t._v("#")]),t._v(" 6、在多个NDK项目间共享模块")]),t._v(" "),a("ul",[a("li",[t._v("首先将avilib源代码移动到NDK项目以外的位置，比如："),a("code",[t._v("C:\\android\\shared-modules\\transcode\\avilib")]),t._v("。")]),t._v(" "),a("li",[t._v("作为共享库模块，avilib需要有自己的Android.mk文件。")]),t._v(" "),a("li",[t._v("以"),a("code",[t._v("transcode/avilib")]),t._v("为参数调用函数宏"),a("code",[t._v("import-module")]),t._v("添加到NDK项目的Android.mk文档末尾。")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("import-module")]),t._v("函数宏在NDK版本r5以后才有。")])]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# avilib模块自己的Android.mk文件")]),t._v("\nLOCAL_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" my-dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib.c platform_posix.c\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_SHARED_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n---------------------------------------------\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用共享模块的NDK项目1的Android.mk文件")]),t._v("\nLOCAL_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" my-dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module1\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module1.c\nLOCAL_SHARED_LIBRARIES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_SHARED_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" import-module,transcode/avilib"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n---------------------------------------------\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用共享模块的NDK项目2的Android.mk文件")]),t._v("\nLOCAL_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" my-dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module2\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module2.c\nLOCAL_SHARED_LIBRARIES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_SHARED_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" import-module,transcode/avilib"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("当心细的你在看到"),a("code",[t._v("$(call import-module,transcode/avilib)")]),t._v("这句时，一定会问，为什么NDK会知道要去"),a("code",[t._v("C:\\android\\shared-modules\\")]),t._v("目录下面找"),a("code",[t._v("transcode/avilib")]),t._v("呢？是的，NDK并没有这么智能，默认情况下，"),a("code",[t._v("import-module")]),t._v("函数宏只会搜索AndroidNDK下面的sources目录。")]),t._v(" "),a("blockquote",[a("p",[t._v("如我的NDK路径是："),a("code",[t._v("C:\\Users\\lqr\\AppData\\Local\\Android\\Sdk\\ndk-bundle")]),t._v("，那么"),a("code",[t._v("import-module")]),t._v("函数宏默认的寻找目录就是"),a("code",[t._v("C:\\Users\\lqr\\AppData\\Local\\Android\\Sdk\\ndk-bundle\\sources")])])]),t._v(" "),a("p",[t._v("要正确使用"),a("code",[t._v("import-module")]),t._v("，就需要对NDK_MODULE_PATH进行配置，把"),a("code",[t._v("C:\\android\\shared-modules\\")]),t._v("配置到环境变量中即可，当有多个共享库目录时，用"),a("code",[t._v(";")]),t._v("隔开。")]),t._v(" "),a("blockquote",[a("p",[t._v("更多关于import-module的介绍，请翻到文末查看。")])]),t._v(" "),a("h3",{attrs:{id:"_7、使用预编译库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、使用预编译库"}},[t._v("#")]),t._v(" 7、使用预编译库")]),t._v(" "),a("ul",[a("li",[t._v("想在不发布源代码的情况下将模块发布给他人。")]),t._v(" "),a("li",[t._v("想使用共享库模块的预编译版来加速编译过程。")])]),t._v(" "),a("p",[t._v("现在我们手上有第三方预编译好的库libavilib.so，想集成到自己项目中使用，则需要在Android.mk中进行如下配置：")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 预编译共享模块的Android.mk文件")]),t._v("\nLOCAL_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" my-dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第三方预编译的库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" libavilib.so\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PREBUILT_SHARED_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("可以看到，"),a("code",[t._v("LOCAL_SRC_FILES")]),t._v("指向的不再是源文件，而是预编译好的libavilib.so，相对于LOCAL_PATH的位置。")]),t._v(" "),a("h3",{attrs:{id:"_8、编译独立的可执行文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、编译独立的可执行文件"}},[t._v("#")]),t._v(" 8、编译独立的可执行文件")]),t._v(" "),a("p",[t._v("为了方便测试和进行快速开发，可以编译成可执行文件。不用打包成APK就可以得到到Android设备上直接执行。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 独立可执行模块的Android.mk文件")]),t._v("\nLOCAL_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),t._v(" my-dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLEAR_VARS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOCAL_MODULE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module\nLOCAL_SRC_FILES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" module.c\nLOCAL_STATIC_LIBRARIES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" avilib\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BUILD_EXECUTABLE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"_9、注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、注意事项"}},[t._v("#")]),t._v(" 9、注意事项")]),t._v(" "),a("p",[t._v("假如我们本地库libhello-jni.so依赖于libTest.so（可以使用NDK下的ndk-depends查看so的依赖关系）。")]),t._v(" "),a("ul",[a("li",[t._v("在Android6.0版本之前，需要在加载本地库前先加载被依赖的so。")]),t._v(" "),a("li",[t._v("在Android6.0版本之后，不能再使用预编译的动态库（静态库没问题）。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Android 6.0版本之前：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadlibrary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadlibrary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello-jni"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Android 6.0版本之后：  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadlibrary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello-jni"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"四、附加"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、附加"}},[t._v("#")]),t._v(" 四、附加")]),t._v(" "),a("h3",{attrs:{id:"_1、import-module-详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、import-module-详解"}},[t._v("#")]),t._v(" 1、import_module 详解")]),t._v(" "),a("blockquote",[a("p",[t._v("以下内容引用自 "),a("a",{attrs:{href:"https://www.cnblogs.com/liulipeng/p/3524345.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《import-module的注意事项与NDK_MODULE_PATH的配置》"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210105221940.png",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210105221713.png",alt:""}})])])}),[],!1,null,null,null);a.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{448:function(e,t,n){"use strict";n.r(t);var a=n(21),i=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"一、简述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、简述"}},[e._v("#")]),e._v(" 一、简述")]),e._v(" "),t("h3",{attrs:{id:"_1、aop的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、aop的概念"}},[e._v("#")]),e._v(" 1、AOP的概念")]),e._v(" "),t("p",[e._v("如果你用java做过后台开发，那么你一定知道AOP这个概念。如果不知道也无妨，套用百度百科的介绍，也能让你明白这玩意是干什么的：")]),e._v(" "),t("blockquote",[t("p",[e._v("AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。")])]),e._v(" "),t("h3",{attrs:{id:"_2、项目场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、项目场景"}},[e._v("#")]),e._v(" 2、项目场景")]),e._v(" "),t("p",[e._v("项目开发过程中，可能会有这样的需求，需要我们在方法执行完成后，记录日志（后台开发中比较常见~），或是计算这个方法的执行时间，在不使用AOP的情况下，我们可以在方法最后调用另一个专门记录日志的方法，或是在方法体的首尾分别获取时间，然后通过计算时间差来计算整个方法执行所消耗的时间，这样也可以完成需求。那如果不只一个方法要这么玩怎么办？每个方法都写上一段相同的代码吗？后期处理逻辑变了要怎么办？最后老板说这功能不要了我们还得一个个删除？")]),e._v(" "),t("p",[e._v("很明显，这是不可能的，我们不仅仅是代码的搬运工，我们还是有思考能力的软件开发工程师。这么low的做法绝对不干，这种问题我们完全可以用AOP来解决，不就是在方法前和方法后插入一段代码吗？AOP分分钟搞定。")]),e._v(" "),t("h3",{attrs:{id:"_3、aop的实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、aop的实现方式"}},[e._v("#")]),e._v(" 3、AOP的实现方式")]),e._v(" "),t("p",[e._v("要注意了，AOP仅仅只是个概念，实现它的方式（工具和库）有以下几种：")]),e._v(" "),t("ul",[t("li",[e._v("AspectJ: 一个 JavaTM 语言的面向切面编程的无缝扩展（适用Android）。")]),e._v(" "),t("li",[e._v("Javassist for Android: 用于字节码操作的知名 java 类库 Javassist 的 Android 平台移植版。")]),e._v(" "),t("li",[e._v("DexMaker: Dalvik 虚拟机上，在编译期或者运行时生成代码的 Java API。")]),e._v(" "),t("li",[e._v("ASMDEX: 一个类似 ASM 的字节码操作库，运行在Android平台，操作Dex字节码。")])]),e._v(" "),t("p",[e._v("本篇的主角就是AspectJ，下面就来看看AspectJ方式的AOP如何在Android开发中进行使用吧。")]),e._v(" "),t("h2",{attrs:{id:"二、aspectj的引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、aspectj的引入"}},[e._v("#")]),e._v(" 二、AspectJ的引入")]),e._v(" "),t("p",[e._v("对于eclipse与Android Studio的引入是不一样的，本篇只介绍Android Studio如何引入AspectJ，eclipse请自行百度。Android Studio需要在app模块的build.gradle文件中引入，总共分为3个步骤：")]),e._v(" "),t("h3",{attrs:{id:"_1-添加核心依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加核心依赖"}},[e._v("#")]),e._v(" 1）添加核心依赖")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("dependencies {\n    ...\n    compile 'org.aspectj:aspectjrt:1.8.9'\n}\n")])])]),t("h3",{attrs:{id:"_2-编写gradle编译脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-编写gradle编译脚本"}},[e._v("#")]),e._v(" 2）编写gradle编译脚本")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'org.aspectj:aspectjtools:1.8.9'\n        classpath 'org.aspectj:aspectjweaver:1.8.9'\n    }\n}\n")])])]),t("blockquote",[t("p",[e._v("AspectJ需要依赖maven仓库。")])]),e._v(" "),t("h3",{attrs:{id:"_3-添加gradle任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-添加gradle任务"}},[e._v("#")]),e._v(" 3）添加gradle任务")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('dependencies {\n    ...\n}\n// 贴上面那段没用的代码是为了说明：下面的任务代码与dependencies同级\n\nimport org.aspectj.bridge.IMessage\nimport org.aspectj.bridge.MessageHandler\nimport org.aspectj.tools.ajc.Main\nfinal def log = project.logger\nfinal def variants = project.android.applicationVariants\n\nvariants.all { variant ->\n    if (!variant.buildType.isDebuggable()) {\n        log.debug("Skipping non-debuggable build type \'${variant.buildType.name}\'.")\n        return;\n    }\n\n    JavaCompile javaCompile = variant.javaCompile\n    javaCompile.doLast {\n        String[] args = ["-showWeaveInfo",\n                         "-1.8",\n                         "-inpath", javaCompile.destinationDir.toString(),\n                         "-aspectpath", javaCompile.classpath.asPath,\n                         "-d", javaCompile.destinationDir.toString(),\n                         "-classpath", javaCompile.classpath.asPath,\n                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]\n        log.debug "ajc args: " + Arrays.toString(args)\n\n        MessageHandler handler = new MessageHandler(true);\n        new Main().run(args, handler);\n        for (IMessage message : handler.getMessages(null, true)) {\n            switch (message.getKind()) {\n                case IMessage.ABORT:\n                case IMessage.ERROR:\n                case IMessage.FAIL:\n                    log.error message.message, message.thrown\n                    break;\n                case IMessage.WARNING:\n                    log.warn message.message, message.thrown\n                    break;\n                case IMessage.INFO:\n                    log.info message.message, message.thrown\n                    break;\n                case IMessage.DEBUG:\n                    log.debug message.message, message.thrown\n                    break;\n            }\n        }\n    }\n}\n')])])]),t("blockquote",[t("p",[e._v("直接粘贴到build.gradle文件的末尾即可，不要嵌套在别的指令中。")])]),e._v(" "),t("h2",{attrs:{id:"三、aop的基本知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、aop的基本知识"}},[e._v("#")]),e._v(" 三、AOP的基本知识")]),e._v(" "),t("p",[e._v("在使用AspectJ之前，还是需要先介绍下AOP的基本知识，熟悉的看官可以跳过这部分。")]),e._v(" "),t("h3",{attrs:{id:"_1、aop术语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、aop术语"}},[e._v("#")]),e._v(" 1、AOP术语")]),e._v(" "),t("ol",[t("li",[e._v("通知、增强处理（Advice）：就是你想要的功能，也就是上面说的日志、耗时计算等。")]),e._v(" "),t("li",[e._v("连接点（JoinPoint）：允许你通知（Advice）的地方，那可就真多了，基本每个方法的前、后（两者都有也行），或抛出异常是时都可以是连接点（spring只支持方法连接点）。AspectJ还可以让你在构造器或属性注入时都行，不过一般情况下不会这么做，只要记住，和方法有关的前前后后都是连接点。")]),e._v(" "),t("li",[e._v("切入点（Pointcut）：上面说的连接点的基础上，来定义切入点，你的一个类里，有15个方法，那就有十几个连接点了对吧，但是你并不想在所有方法附件都使用通知（使用叫织入，下面再说），你只是想让其中几个，在调用这几个方法之前、之后或者抛出异常时干点什么，那么就用切入点来定义这几个方法，让切点来筛选连接点，选中那几个你想要的方法。")]),e._v(" "),t("li",[e._v("切面（Aspect）：切面是通知和切入点的结合。现在发现了吧，没连接点什么事，连接点就是为了让你好理解切点搞出来的，明白这个概念就行了。通知说明了干什么和什么时候干（什么时候通过before，after，around等AOP注解就能知道），而切入点说明了在哪干（指定到底是哪个方法），这就是一个完整的切面定义。")]),e._v(" "),t("li",[e._v("织入（weaving） 把切面应用到目标对象来创建新的代理对象的过程。")])]),e._v(" "),t("p",[e._v("上述术语的解释引用自"),t("a",{attrs:{href:"http://blog.csdn.net/u013782203/article/details/51799427",target:"_blank",rel:"noopener noreferrer"}},[e._v("《AOP中的概念通知、切点、切面》"),t("OutboundLink")],1),e._v("这篇文章，作者的描述非常直白，很容易理解，点个赞。")]),e._v(" "),t("h3",{attrs:{id:"_2、aop注解与使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、aop注解与使用"}},[e._v("#")]),e._v(" 2、AOP注解与使用")]),e._v(" "),t("ul",[t("li",[e._v("@Aspect：声明切面，标记类")]),e._v(" "),t("li",[e._v("@Pointcut(切点表达式)：定义切点，标记方法")]),e._v(" "),t("li",[e._v("@Before(切点表达式)：前置通知，切点之前执行")]),e._v(" "),t("li",[e._v("@Around(切点表达式)：环绕通知，切点前后执行")]),e._v(" "),t("li",[e._v("@After(切点表达式)：后置通知，切点之后执行")]),e._v(" "),t("li",[e._v("@AfterReturning(切点表达式)：返回通知，切点方法返回结果之后执行")]),e._v(" "),t("li",[e._v("@AfterThrowing(切点表达式)：异常通知，切点抛出异常时执行")])]),e._v(" "),t("blockquote",[t("p",[e._v("@Pointcut、@Before、@Around、@After、@AfterReturning、@AfterThrowing需要在切面类中使用，即在使用@Aspect的类中。")])]),e._v(" "),t("h4",{attrs:{id:"_1-切点表达式是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-切点表达式是什么"}},[e._v("#")]),e._v(" 1）切点表达式是什么？")]),e._v(" "),t("p",[e._v("这就是切点表达式：execution (* com.lqr..*.*(..))。切点表达式的组成如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("execution(<修饰符模式>? <返回类型模式> <方法名模式>(<参数模式>) <异常模式>?)\n")])])]),t("blockquote",[t("p",[e._v("除了返回类型模式、方法名模式和参数模式外，其它项都是可选的。"),t("br"),e._v("\n修饰符模式指的是public、private、protected，异常模式指的是NullPointException等。")])]),e._v(" "),t("p",[e._v("对于切点表达式的理解不是本篇重点，下面列出几个例子说明一下就好了：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Before("execution(public * *(..))")\npublic void before(JoinPoint point) {\n    System.out.println("CSDN_LQR");\n}\n')])])]),t("blockquote",[t("p",[e._v('匹配所有public方法，在方法执行之前打印"CSDN_LQR"。')])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Around("execution(* *to(..))")\npublic void around(ProceedingJoinPoint joinPoint) {\n    System.out.println("CSDN");\n\tjoinPoint.proceed();\n    System.out.println("LQR");\n}\n')])])]),t("blockquote",[t("p",[e._v('匹配所有以"to"结尾的方法，在方法执行之前打印"CSDN"，在方法执行之后打印"LQR"。')])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@After("execution(* com.lqr..*to(..))")\npublic void after(JoinPoint point) {\n    System.out.println("CSDN_LQR");\n}\n')])])]),t("blockquote",[t("p",[e._v('匹配com.lqr包下及其子包中以"to"结尾的方法，在方法执行之后打印"CSDN_LQR"。')])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@AfterReturning("execution(int com.lqr.*(..))")\npublic void afterReturning(JoinPoint point, Object returnValue) {\n    System.out.println("CSDN_LQR");\n}\n')])])]),t("blockquote",[t("p",[e._v('匹配com.lqr包下所有返回类型是int的方法，在方法返回结果之后打印"CSDN_LQR"。')])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@AfterThrowing(value = "execution(* com.lqr..*(..))", throwing = "ex")\npublic void afterThrowing(Throwable ex) {\n    System.out.println("ex = " + ex.getMessage());\n}\n')])])]),t("blockquote",[t("p",[e._v('匹配com.lqr包及其子包中的所有方法，当方法抛出异常时，打印"ex = 报错信息"。')])]),e._v(" "),t("h4",{attrs:{id:"_2-pointcut的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-pointcut的使用"}},[e._v("#")]),e._v(" 2）@Pointcut的使用")]),e._v(" "),t("p",[e._v("@Pointcut是专门用来定义切点的，让切点表达式可以复用。")]),e._v(" "),t("p",[e._v("你可能需要在切点执行之前和切点报出异常时做些动作（如：出错时记录日志），可以这么做：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Before("execution(* com.lqr..*(..))")\npublic void before(JoinPoint point) {\n    System.out.println("CSDN_LQR");\n}\n\n@AfterThrowing(value = "execution(* com.lqr..*(..))", throwing = "ex")\npublic void afterThrowing(Throwable ex) {\n    System.out.println("记录日志");\n}\n')])])]),t("p",[e._v("可以看到，表达式是一样的，那要怎么重用这个表达式呢？这就需要用到@Pointcut注解了，@Pointcut注解是注解在一个空方法上的，如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Pointcut("execution(* com.lqr..*(..))")\npublic void pointcut() {}\n')])])]),t("p",[e._v("这时，"),t("strong",[e._v('"pointcut()"'),t("strong",[e._v("就等价于")]),e._v('"execution(* com.lqr..*(..))"')]),e._v("，那么上面的代码就可以这么改了：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Before("pointcut()")\npublic void before(JoinPoint point) {\n    System.out.println("CSDN_LQR");\n}\n\n@AfterThrowing(value = "pointcut()", throwing = "ex")\npublic void afterThrowing(Throwable ex) {\n    System.out.println("记录日志");\n}\n')])])]),t("h2",{attrs:{id:"四、实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、实战"}},[e._v("#")]),e._v(" 四、实战")]),e._v(" "),t("p",[e._v("经过上面的学习，下面是时候实战一下了，这里我们来一个简单的例子。")]),e._v(" "),t("h3",{attrs:{id:"_1、切点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、切点"}},[e._v("#")]),e._v(" 1、切点")]),e._v(" "),t("p",[e._v("这是界面上一个按钮的点击事件，就是一个简单的方法而已，我们拿它来试刀。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public void test(View view) {\n    System.out.println("Hello, I am CSDN_LQR");\n}\n')])])]),t("h3",{attrs:{id:"_2、切面类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、切面类"}},[e._v("#")]),e._v(" 2、切面类")]),e._v(" "),t("p",[e._v("要织入一段代码到目标类方法的前前后后，必须要有一个切面类，下面就是切面类的代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Aspect\npublic class TestAnnoAspect {\n\n    @Pointcut("execution(* com.lqr.androidaopdemo.MainActivity.test(..))")\n    public void pointcut() {\n\n    }    \n\n\t@Before("pointcut()")\n    public void before(JoinPoint point) {\n        System.out.println("@Before");\n    }\n\n    @Around("pointcut()")\n    public void around(ProceedingJoinPoint joinPoint) throws Throwable {\n        System.out.println("@Around");\n    }\n\n \t@After("pointcut()")\n    public void after(JoinPoint point) {\n        System.out.println("@After");\n    }\n\n    @AfterReturning("pointcut()")\n    public void afterReturning(JoinPoint point, Object returnValue) {\n        System.out.println("@AfterReturning");\n    }\n\n    @AfterThrowing(value = "pointcut()", throwing = "ex")\n    public void afterThrowing(Throwable ex) {\n        System.out.println("@afterThrowing");\n        System.out.println("ex = " + ex.getMessage());\n    }\n}\n')])])]),t("h3",{attrs:{id:"_3、各通知的执行结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、各通知的执行结果"}},[e._v("#")]),e._v(" 3、各通知的执行结果")]),e._v(" "),t("p",[e._v("先来试试看，这几个注解的执行结果如何。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210106001104.png",alt:""}})]),e._v(" "),t("p",[e._v('不对啊，按钮的点击事件中有打印"Hello, I am CSDN_LQR"的，这里没有，怎么肥事？')]),e._v(" "),t("p",[e._v("这里因为@Around环绕通知会拦截原方法内容的执行，我们需要手动放行才可以。代码修改如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Around("pointcut()")\npublic void around(ProceedingJoinPoint joinPoint) throws Throwable {\n    System.out.println("@Around");\n\tjoinPoint.proceed();// 目标方法执行完毕\n}\n')])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210106001120.png",alt:""}})]),e._v(" "),t("p",[e._v("也不对啊，少了一个@AfterThrowing通知。这个通知只有在切点抛出异常时才会执行，我们可以让代码出现一个简单的运行时异常：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public void test(View view) {\n    System.out.println("Hello, I am CSDN_LQR");\n    int a = 1 / 0;\n}\n')])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FullStackAction/PicBed@resource/image/20210106001134.png",alt:""}})]),e._v(" "),t("p",[e._v("这下@AfterThrowing通知确实被调用了，而且也打印出了错误信息（divide by zero）。但@AfterReturning通知反而不执行了，原因很简单，都抛出异常了，切点肯定是不能返回结果的。也就是说：@AfterThrowing通知与@AfterReturning通知是冲突的，在同个切点上不可能同时出现。")]),e._v(" "),t("h3",{attrs:{id:"_4、方法耗时计算的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、方法耗时计算的实现"}},[e._v("#")]),e._v(" 4、方法耗时计算的实现")]),e._v(" "),t("p",[e._v("因为@Around是环绕通知，可以在切点的前后分别执行一些操作，AspectJ为了能肯定操作是在切点前还是在切点后，所以在@Around通知中需要手动执行joinPoint.proceed()来确定切点已经执行，故在joinPoint.proceed()之前的代码会在切点执行前执行，在joinPoint.proceed()之后的代码会切点执行后执行。于是，方法耗时计算的实现就是这么简单：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Around("pointcut()")\npublic void around(ProceedingJoinPoint joinPoint) throws Throwable {\n    long beginTime = SystemClock.currentThreadTimeMillis();\n    joinPoint.proceed();\n    long endTime = SystemClock.currentThreadTimeMillis();\n    long dx = endTime - beginTime;\n    System.out.println("耗时：" + dx + "ms");\n}\n')])])]),t("h3",{attrs:{id:"_5、joinpoint的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、joinpoint的作用"}},[e._v("#")]),e._v(" 5、JoinPoint的作用")]),e._v(" "),t("p",[e._v("发现没有，上面所有的通知都会至少携带一个JointPoint参数，这个参数包含了切点的所有信息，下面就结合按钮的点击事件方法test()来解释joinPoint能获取到的方法信息有哪些：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("MethodSignature signature = (MethodSignature) joinPoint.getSignature();\nString name = signature.getName(); // 方法名：test\nMethod method = signature.getMethod(); // 方法：public void com.lqr.androidaopdemo.MainActivity.test(android.view.View)\nClass returnType = signature.getReturnType(); // 返回值类型：void\nClass declaringType = signature.getDeclaringType(); // 方法所在类名：MainActivity\nString[] parameterNames = signature.getParameterNames(); // 参数名：view\nClass[] parameterTypes = signature.getParameterTypes(); // 参数类型：View\n")])])]),t("h3",{attrs:{id:"_6、注解切点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、注解切点"}},[e._v("#")]),e._v(" 6、注解切点")]),e._v(" "),t("p",[e._v("前面的切点表达式结构是这样的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("execution(<修饰符模式>? <返回类型模式> <方法名模式>(<参数模式>) <异常模式>?)\n")])])]),t("p",[e._v("但实际上，上面的切点表达式结构并不完整，应该是这样的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("execution(<@注解类型模式>? <修饰符模式>? <返回类型模式> <方法名模式>(<参数模式>) <异常模式>?)\n")])])]),t("p",[e._v("这就意味着，切点可以用注解来标记了。")]),e._v(" "),t("h4",{attrs:{id:"_1-自定义注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-自定义注解"}},[e._v("#")]),e._v(" 1）自定义注解")]),e._v(" "),t("p",[e._v("如果用注解来标记切点，一般会使用自定义注解，方便我们拓展。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface TestAnnoTrace {\n    String value();\n    int type();\n}\n")])])]),t("ul",[t("li",[e._v("@Target(ElementType.METHOD)：表示该注解只能注解在方法上。如果想类和方法都可以用，那可以这么写：@Target({ElementType.METHOD,ElementType.TYPE})，依此类推。")]),e._v(" "),t("li",[e._v("@Retention(RetentionPolicy.RUNTIME)：表示该注解在程序运行时是可见的（还有SOURCE、CLASS分别指定注解对于那个级别是可见的，一般都是用RUNTIME）。")])]),e._v(" "),t("p",[e._v("其中的value和type是自己拓展的属性，方便存储一些额外的信息。")]),e._v(" "),t("h4",{attrs:{id:"_2-使用自定义注解标记切点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用自定义注解标记切点"}},[e._v("#")]),e._v(" 2）使用自定义注解标记切点")]),e._v(" "),t("p",[e._v("这个自定义注解只能注解在方法上（构造方法除外，构造方法也叫构造器，需要使用ElementType.CONSTRUCTOR），像平常使用其它注解一样使用它即可：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@TestAnnoTrace(value = "lqr_test", type = 1)\npublic void test(View view) {\n    System.out.println("Hello, I am CSDN_LQR");\n}\n')])])]),t("h4",{attrs:{id:"_3-注解的切点表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-注解的切点表达式"}},[e._v("#")]),e._v(" 3）注解的切点表达式")]),e._v(" "),t("p",[e._v("既然用注解来标记切点，那么切点表达式肯定是有所不同的，要这么写：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('@Pointcut("execution(@com.lqr.androidaopdemo.TestAnnoTrace * *(..))")\npublic void pointcut() {}\n')])])]),t("blockquote",[t("p",[e._v("切点表达式使用注解，一定是@+注解全路径，如：@com.lqr.androidaopdemo.TestAnnoTrace。")])]),e._v(" "),t("p",[e._v("亲测可用 ，不贴图了。")]),e._v(" "),t("h4",{attrs:{id:"_4-获取注解属性值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-获取注解属性值"}},[e._v("#")]),e._v(" 4）获取注解属性值")]),e._v(" "),t("p",[e._v("上面在编写自定义注解时就声明了两个属性，分别是value和type，而且在使用该注解时也都为之赋值了，那怎么在通知中获取这两个属性值呢？还记得JoinPoint这个参数吧，它就可以获取到注解中的属性值，如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("MethodSignature signature = (MethodSignature) joinPoint.getSignature();\nMethod method = signature.getMethod();\n// 通过Method对象得到切点上的注解\nTestAnnoTrace annotation = method.getAnnotation(TestAnnoTrace.class);\nString value = annotation.value();\nint type = annotation.type();\n")])])]),t("h3",{attrs:{id:"最后贴下demo地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最后贴下demo地址"}},[e._v("#")]),e._v(" 最后贴下Demo地址")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/GitLqr/AndroidAopDemo",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/GitLqr/AndroidAopDemo"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=i.exports}}]);